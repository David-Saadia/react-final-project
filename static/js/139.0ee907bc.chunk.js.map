{"version":3,"file":"static/js/139.0ee907bc.chunk.js","mappings":"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","sources":["hooks/useRequireAuth.js","components/ChatList/ChatList.js","components/Message/Message.js","components/ChatRoom/ChatRoom.js","pages/Chat/Chat.js"],"sourcesContent":["\r\n//**This componet will be used to verify user's authentication and redirect\r\n// the user to the home page if authentication expires, instead of implementing this \r\n// redirection logic in every component, we'll just include this hook in every page component */\r\n\r\nimport { startTransition, useContext, useEffect, useState } from \"react\";\r\nimport { userContext } from \"../UserProvider\";\r\nimport { useNavigate } from \"react-router-dom\";\r\n\r\n\r\nexport function useRequireAuth(){\r\n    const {user, loading} = useContext(userContext);\r\n    const [isAuthenticated, setIsAuthenticated] = useState(false);\r\n\r\n    \r\n    const navigate = useNavigate();\r\n    \r\n    useEffect(()=>{   \r\n        const goto = (path, options={}) => {\r\n            startTransition(() => {\r\n                navigate(path, options);\r\n            });\r\n        };\r\n\r\n        if(loading) return <div>Loading...</div>;\r\n    \r\n        if(user)\r\n            setIsAuthenticated(true);\r\n        if(!isAuthenticated && !loading) \r\n            console.log(\"User is not authenticated, redirecting...\");\r\n        if(!loading && !user)\r\n            goto(\"/\");\r\n            \r\n    },[user,loading, navigate, isAuthenticated]);\r\n}","import { useContext, useEffect, useState } from \"react\";\r\n\r\n//Context and tools\r\nimport { userContext } from \"../../UserProvider\";\r\nimport { extractAcronym } from \"../../utils\";\r\nimport { findAvatarDB, findUserNameDB } from \"../../firebase/ReadWriteDB\";\r\nimport axiosInstance from \"../../axiosInstance\";\r\n\r\n//Components and styles\r\nimport \"./ChatList.css\"\r\nimport ScreenTitle from \"../base-components/ScreenTitle/ScreenTitle\";\r\n\r\n\r\nexport default function ChatList(props){\r\n\r\n    \r\n    const [chatThumbnails, setChatThumbnails] = useState([]);\r\n    const {user, loading} = useContext(userContext);\r\n    const [chatList, setChatList] = useState([]);\r\n    \r\n    useEffect(()=>{\r\n        const fetchChatList = async () => {\r\n            const limit = 20;\r\n            try{\r\n                const response = await axiosInstance.get(`/chats/?userId=${user.uid}&limit=${limit}`);\r\n                if (response.status===200){\r\n                    //DEBUG: console.log(response.data.message);\r\n                    //DEBUG: console.log(response.data.chats);\r\n                    setChatList(response.data.chats);\r\n                }\r\n            }\r\n            catch(err){\r\n                console.log(err);\r\n                console.log(err.response?.data?.message);\r\n            }\r\n        }\r\n        fetchChatList();\r\n    }, [user]);\r\n    \r\n    useEffect(() => {\r\n        const fetchChatThumbnails = async (limit=-1) => {\r\n                if(limit<0 && chatList){\r\n                    //DEBUG: console.log(\"Attempting to pull users's chats list names/images\")\r\n                    const thumbnails = await Promise.all(chatList.map(async (chatItem) => {\r\n                        const avatar = chatItem.isGroupChat\r\n                        ? await findAvatarDB(chatItem.creator)\r\n                        : await findAvatarDB(chatItem.participants.find(member => member !== user?.uid));\r\n\r\n                        //DEBUG: console.log(avatar);\r\n                        //DEBUG: console.log(chatItem);\r\n                        let label = \"N/A\"\r\n                        try{\r\n                            if(!chatItem.isGroupChat) \r\n                                label = await findUserNameDB(chatItem.participants.find(member => member !== user?.uid));\r\n                            else{\r\n                                const response = await axiosInstance.get(`/groups/search/${chatItem.group._id}`);\r\n                                if(response.status===200){\r\n                                    label = response.data.group.name;\r\n                                    //DEBUG console.log(label);\r\n                                }\r\n                            }\r\n                        }catch(err){\r\n                            console.log(err);\r\n                        }\r\n                        if(label?.length>10) {\r\n                            if(label.split(\" \").length>1)\r\n                                label = extractAcronym(label).slice(0,3);          \r\n                            else\r\n                                label = label.slice(0,7);\r\n                        }\r\n                        //DEBUG: console.log(`label: ${label} avatar: ${avatar}`);\r\n\r\n                        return {avatar, label};\r\n                    }));\r\n                    setChatThumbnails(thumbnails);\r\n                }\r\n        }\r\n        fetchChatThumbnails();\r\n    }, [chatList,user]);\r\n\r\n    const openChat =(chatIndex)=>{\r\n        console.log(\"opening chat\", chatIndex);\r\n        props.setChatSelected(chatIndex);\r\n    }\r\n    \r\n    if(loading) return <div>Loading...</div>;\r\n    \r\n    return(\r\n    <div className=\"docked-container\" id=\"chat-list-container\">\r\n        <ul className=\"chat-list\">\r\n            {chatThumbnails.map((thumbnail, index) => (\r\n                <li onClick={(e)=>openChat(chatList[index]._id)} className=\"grouped chat-item\" id=\"chat-i\" key={index}>\r\n                    <img id=\"chat-avatar\" src={thumbnail.avatar} alt={thumbnail.label} />\r\n                    <ScreenTitle title={thumbnail.label} designClass=\"chat-title\"/>\r\n                </li>\r\n            ))}\r\n        </ul>    \r\n    </div>\r\n\r\n    );\r\n}","import { useContext, useEffect, useState } from \"react\";\r\n\r\n//Context and tools\r\nimport { findAvatarDB, findUserNameDB } from \"../../firebase/ReadWriteDB\";\r\nimport { userContext } from \"../../UserProvider\";\r\nimport { timeSincePost } from \"../../utils\";\r\n\r\n//Components and styles\r\nimport \"./Message.css\";\r\n\r\nexport default function Message(props){\r\n    const [avatar, setAvatar] = useState(\"\");\r\n    const [userName, setUsername] = useState(\"\");\r\n    const {message} = props\r\n    const {user, fetchUserPFP} = useContext(userContext);\r\n\r\n    useEffect(()=>{\r\n        const fetchAvatarAndUsername = async () => {\r\n            try{\r\n                const avatar = await findAvatarDB(message.author);\r\n                const username = await findUserNameDB(message.author);\r\n                if(avatar.includes(\"static\")) \r\n                    setAvatar(avatar);\r\n                else{\r\n                    const fetchedAvatar = await fetchUserPFP(avatar, false);\r\n                    if(fetchedAvatar)\r\n                        setAvatar(fetchedAvatar);\r\n                }\r\n                setUsername(username);\r\n            }\r\n            catch(err){\r\n                console.log(err);\r\n            }\r\n        }\r\n        fetchAvatarAndUsername();\r\n    }, [message.author, fetchUserPFP]);\r\n\r\n\r\n    return(\r\n        <li className=\"message grouped\">\r\n            {message.author === user?.uid\r\n            ? (\r\n                <>\r\n                    <img src={avatar} alt={`message-avatar`} id=\"message-avatar\"/>\r\n                    <div className=\"message-content\">\r\n                        <div className=\"message-time\">{timeSincePost(message.timestamp)}</div>\r\n                        <div className=\"chat-bubble\">\r\n                            <div className=\"message-username\"><strong>{userName}</strong></div>\r\n                            <div className=\"message-text\">{message.content}</div>\r\n                        </div>\r\n                    </div>\r\n                </>\r\n            )\r\n            : (\r\n                <>\r\n                <div className=\"message-content\">\r\n                    <div className=\"message-time right\">{timeSincePost(message.timestamp)}</div>\r\n                    <div className=\"chat-bubble right\">\r\n                        <div className=\"message-username right\"><strong>{userName}</strong></div>\r\n                        <div className=\"message-text right\">{message.content}</div>\r\n                    </div>\r\n                </div>\r\n                <img src={avatar} alt={`message-avatar`} id=\"message-avatar\"/>\r\n                </>\r\n            )}\r\n            \r\n        </li>\r\n    );\r\n}","import { useContext, useEffect, useRef, useState } from 'react';\r\nimport {io} from 'socket.io-client';\r\nimport axiosInstance from '../../axiosInstance';\r\nimport { userContext } from '../../UserProvider';\r\nimport Message from '../Message/Message';\r\nimport Field from '../base-components/Field/Field';\r\n\r\nimport \"./ChatRoom.css\"\r\n\r\n\r\n\r\n\r\nexport default function ChatRoom(props){\r\n    \r\n    const socketRef = useRef(null);\r\n    const [messages, setMessages] = useState([]);\r\n    const [input, setInput] = useState('');\r\n    const {user, token} = useContext(userContext);\r\n    const endRef = useRef(null);\r\n    const {chatId} = props;\r\n    const [joined, setJoined] = useState(false);\r\n\r\n    useEffect(() => {\r\n        const fetchMessage = async () => {\r\n            setMessages([]);\r\n            \r\n            try{\r\n                console.log(`Attempting to pull messages for chat ${chatId}`);\r\n                const response = await axiosInstance.get(`/chats/${chatId}`);\r\n                if (response.status===200){\r\n                    console.log(response.data.message);\r\n                    //DEBUG: console.log(response.data.messages);\r\n                    setMessages(response.data.messages);\r\n                }\r\n            }\r\n            catch(err){\r\n                console.log(err);\r\n                console.log(err.response?.data?.message);\r\n            }\r\n        }\r\n        fetchMessage();\r\n    },[chatId]);\r\n\r\n\r\n    useEffect(() => {\r\n        if(!chatId || !token) return;\r\n        const socket = io('http://localhost:42069');\r\n        socketRef.current = socket; \r\n        \r\n        if(socket.current===null) {\r\n            console.log(`socket is null`);\r\n            return;};\r\n        //console.log(`token: ${token}`);\r\n       \r\n        socket.emit('authenticate', token);\r\n\r\n        \r\n        socket.on('authenticated', (response)=>{ \r\n            console.log(response?.message);\r\n            socket.emit('joinChat', chatId);\r\n        });\r\n        \r\n        socket.on('joinedChat', (response)=>{ console.log(response?.message); setJoined(true);});\r\n\r\n        socket.on('message', (msg) => {\r\n            //DEBUG: console.log(socket.id);\r\n            //DEBUG: console.log(msg.content);\r\n            setMessages(prev=>[...prev, msg]);\r\n        });\r\n\r\n        socket.on('error', (errObj) =>{\r\n            console.log(errObj?.message);            \r\n        });\r\n\r\n        return () => {\r\n          if(socketRef.current){\r\n            socketRef.current.disconnect();\r\n            socketRef.current = null;\r\n          }\r\n          setJoined(false);\r\n          setMessages([]);\r\n        }\r\n    },[chatId, token]);\r\n\r\n    useEffect(() => {\r\n        endRef.current?.scrollIntoView({behavior: \"smooth\"});\r\n    },[messages]);\r\n\r\n    const sendMessage = async () => {\r\n        if(!input.trim() || !joined){\r\n            console.log(`input is empty`);\r\n            if(!joined)\r\n                console.log(`not joined`);\r\n            return; //Empty string.\r\n        } \r\n        socketRef.current.emit('message', {author: user.uid, content: input, chat: chatId});\r\n        setInput('');\r\n    }\r\n    return(\r\n    <div className=\"chat-room\">\r\n        <ul className=\"messages\">\r\n            {(messages.length>0) && messages.map((message,index)=>(<Message key={index} message={message}/>))}\r\n        </ul>\r\n        <div ref={endRef}></div>\r\n        <div className=\"chat-input grouped\">\r\n            <Field value={input} onChange={(e)=>setInput(e.target.value)} prompt=\"Message...\"\r\n                onKeyDown={(e)=> e.key===\"Enter\" && sendMessage()}/>\r\n            <button onClick={sendMessage}>Send</button>\r\n        </div>\r\n    </div>\r\n\r\n    );\r\n}","import {  useEffect, useState } from \"react\";\r\n//import {useContext} from \"react\";\r\nimport { useNavigate, useParams } from \"react-router-dom\";\r\n\r\n//Context and tools\r\n//import { userContext } from \"../../UserProvider\";\r\nimport { useRequireAuth } from \"../../hooks/useRequireAuth\";\r\n\r\n//Components and styles\r\nimport bg from \"../../assets/images/scrollableBackground.png\";\r\nimport ChatList from \"../../components/ChatList/ChatList\";\r\nimport ChatRoom from \"../../components/ChatRoom/ChatRoom\";\r\nimport SideMenu from \"../../components/SideMenu/SideMenu\";\r\nimport NavigationBar from \"../../components/base-components/NavigationBar/NavigationBar\";\r\nimport BackgroundWrapper from \"../../components/base-components/BackgroundWrapper\";\r\nimport Field from \"../../components/base-components/Field/Field\";\r\nimport \"./Chat.css\";\r\n\r\nexport default function Chat({miniView = false}){\r\n    \r\n    const {chatId} = useParams();\r\n    const [chatSelected, setChatSelected] = useState(chatId || null);\r\n    const navigation = useNavigate();\r\n    //const {user} = useContext(userContext);\r\n    useRequireAuth();\r\n\r\n    useEffect(()=>{\r\n        if(chatId!==chatSelected) setChatSelected(chatId);\r\n    },[chatId, chatSelected]);\r\n\r\n\r\n    const handleChatSelect = (id)=>{\r\n        setChatSelected(id);\r\n        navigation(`/chat/${id}`);\r\n        \r\n    }\r\n    \r\n    if( miniView)\r\n        return (<ChatList setChatSelected={handleChatSelect}/>)\r\n\r\n    return(\r\n        <BackgroundWrapper\r\n            title=\"Chat\"\r\n            backgroundImage = {bg}\r\n            backgroundPosition = \"top center\"\r\n            backgroundRepeat=\"repeat-y\"\r\n            backgroundAttachment = \"scroll\"\r\n            >\r\n\r\n            <div className=\"chat\">\r\n                <NavigationBar/>\r\n                <SideMenu/>\r\n                <div className=\"page-container\" id=\"chat-container\">\r\n                    <div className=\"grouped\">\r\n                        <Field type=\"text\" prompt=\"Search...\" styleClass=\"search-bar\" styleId=\"chat-search\"/>\r\n                        <button>Search</button>\r\n                    </div>\r\n                    {chatSelected  && (<ChatRoom chatId={chatSelected} />) }   \r\n                </div>\r\n                <ChatList setChatSelected={handleChatSelect}/>\r\n            </div>\r\n        </BackgroundWrapper>\r\n    );\r\n}"],"names":["useRequireAuth","user","loading","useContext","userContext","isAuthenticated","setIsAuthenticated","useState","navigate","useNavigate","useEffect","_jsx","children","console","log","path","options","arguments","length","undefined","startTransition","goto","ChatList","props","chatThumbnails","setChatThumbnails","chatList","setChatList","async","response","axiosInstance","get","uid","status","data","chats","err","_err$response","_err$response$data","message","fetchChatList","thumbnails","Promise","all","map","_label","avatar","chatItem","isGroupChat","findAvatarDB","creator","participants","find","member","label","group","_id","name","findUserNameDB","split","extractAcronym","slice","fetchChatThumbnails","className","id","thumbnail","index","_jsxs","onClick","e","openChat","chatIndex","setChatSelected","src","alt","ScreenTitle","title","designClass","Message","setAvatar","userName","setUsername","fetchUserPFP","author","username","includes","fetchedAvatar","fetchAvatarAndUsername","_Fragment","timeSincePost","timestamp","content","ChatRoom","socketRef","useRef","messages","setMessages","input","setInput","token","endRef","chatId","joined","setJoined","fetchMessage","socket","io","current","emit","on","msg","prev","errObj","disconnect","_endRef$current","scrollIntoView","behavior","sendMessage","trim","chat","ref","Field","value","onChange","target","prompt","onKeyDown","key","Chat","_ref","miniView","useParams","chatSelected","navigation","handleChatSelect","BackgroundWrapper","backgroundImage","bg","backgroundPosition","backgroundRepeat","backgroundAttachment","NavigationBar","SideMenu","type","styleClass","styleId"],"sourceRoot":""}