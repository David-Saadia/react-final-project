{"version":3,"file":"static/js/879.31588532.chunk.js","mappings":"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","sources":["components/base-components/FormField/FormField.js","hooks/useRequireAuth.js","components/ChatList/ChatList.js","components/Message/Message.js","components/ChatRoom/ChatRoom.js","pages/Chat/Chat.js","pages/Home/Home.js","components/LoginForm/LoginForm.js","Dashboard.js"],"sourcesContent":["import { useState } from \"react\";\r\n\r\nimport \"./FormField.css\";\r\nimport show from \"../../../assets/images/icons/show-password-icon.png\";\r\nimport hide from \"../../../assets/images/icons/hide-password-icon.png\";\r\n\r\n\r\n/**\r\n * FormField: A base component for a form field, which includes a label and a corresponding input field.\r\n * The label is displayed as a tooltip when the input field is focused or has input.\r\n * The input field is required.\r\n * @param {Object} props - The properties for the FormField component.\r\n * @param {String} props.type - The type of the input field, e.g. \"text\", \"password\", etc.\r\n * @param {String} props.value - The value of the input field.\r\n * @param {Function} props.onChange - The callback function when the input field's value changes.\r\n * @param {String} props.prompt - The label for the input field.\r\n * @param {String} props.styleClass - Any additional CSS classes to be added to the component's root element.\r\n */\r\n\r\nexport default function FormField(props){\r\n    const [showPassword , setShowPassword] = useState(false);\r\n    const isPassword = props.type === \"password\";\r\n    const hasContent = props.value && props.value.trim().length > 0;\r\n    return(\r\n        <div className={`form-field ${props.styleClass}`} >\r\n            <input  name={props.type} \r\n                    type={isPassword && showPassword? \"text\" : props.type} \r\n                    title= {props.type} \r\n                    value={props.value} \r\n                    onChange={props.onChange} required/>\r\n            <span className={`popup_text ${hasContent ? \"has-content\" : \"\"}`}>{props.prompt}</span>\r\n            {isPassword && \r\n                <span onClick={() => setShowPassword(prev => !prev)}>\r\n                        <img  className=\"toggle-password\" src={showPassword ?hide:show} alt=\"password toggle\"/> </span>\r\n            }\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\n","\r\n//**This componet will be used to verify user's authentication and redirect\r\n// the user to the home page if authentication expires, instead of implementing this \r\n// redirection logic in every component, we'll just include this hook in every page component */\r\n\r\nimport { startTransition, useContext, useEffect, useState } from \"react\";\r\nimport { userContext } from \"../UserProvider\";\r\nimport { useNavigate } from \"react-router-dom\";\r\n\r\n\r\nexport function useRequireAuth(){\r\n    const {user, loading} = useContext(userContext);\r\n    const [isAuthenticated, setIsAuthenticated] = useState(false);\r\n\r\n    \r\n    const navigate = useNavigate();\r\n    \r\n    useEffect(()=>{   \r\n        const goto = (path, options={}) => {\r\n            startTransition(() => {\r\n                navigate(path, options);\r\n            });\r\n        };\r\n\r\n        if(loading) return <div>Loading...</div>;\r\n    \r\n        if(user)\r\n            setIsAuthenticated(true);\r\n        if(!isAuthenticated && !loading) \r\n            console.log(\"User is not authenticated, redirecting...\");\r\n        if(!loading && !user)\r\n            goto(\"/\");\r\n            \r\n    },[user,loading, navigate, isAuthenticated]);\r\n}","import { useContext, useEffect, useState } from \"react\";\r\n\r\n//Context and tools\r\nimport { userContext } from \"../../UserProvider\";\r\nimport { extractAcronym } from \"../../utils\";\r\nimport { findAvatarDB, findUserNameDB } from \"../../firebase/ReadWriteDB\";\r\nimport axiosInstance from \"../../axiosInstance\";\r\n\r\n//Components and styles\r\nimport \"./ChatList.css\"\r\nimport ScreenTitle from \"../base-components/ScreenTitle/ScreenTitle\";\r\n\r\n\r\nexport default function ChatList(props){\r\n\r\n    \r\n    const [chatThumbnails, setChatThumbnails] = useState([]);\r\n    const {user, loading} = useContext(userContext);\r\n    const [chatList, setChatList] = useState([]);\r\n    \r\n    useEffect(()=>{\r\n        const fetchChatList = async () => {\r\n            const limit = 20;\r\n            try{\r\n                const response = await axiosInstance.get(`/chats/?userId=${user.uid}&limit=${limit}`);\r\n                if (response.status===200){\r\n                    //DEBUG: console.log(response.data.message);\r\n                    //DEBUG: console.log(response.data.chats);\r\n                    setChatList(response.data.chats);\r\n                }\r\n            }\r\n            catch(err){\r\n                console.log(err);\r\n                console.log(err.response?.data?.message);\r\n            }\r\n        }\r\n        fetchChatList();\r\n    }, [user]);\r\n    \r\n    useEffect(() => {\r\n        const fetchChatThumbnails = async (limit=-1) => {\r\n                if(limit<0 && chatList){\r\n                    //DEBUG: console.log(\"Attempting to pull users's chats list names/images\")\r\n                    const thumbnails = await Promise.all(chatList.map(async (chatItem) => {\r\n                        const avatar = chatItem.isGroupChat\r\n                        ? await findAvatarDB(chatItem.creator)\r\n                        : await findAvatarDB(chatItem.participants.find(member => member !== user?.uid));\r\n\r\n                        //DEBUG: console.log(avatar);\r\n                        //DEBUG: console.log(chatItem);\r\n                        let label = \"N/A\"\r\n                        try{\r\n                            if(!chatItem.isGroupChat) \r\n                                label = await findUserNameDB(chatItem.participants.find(member => member !== user?.uid));\r\n                            else{\r\n                                const response = await axiosInstance.get(`/groups/search/${chatItem.group._id}`);\r\n                                if(response.status===200){\r\n                                    label = response.data.group.name;\r\n                                    //DEBUG console.log(label);\r\n                                }\r\n                            }\r\n                        }catch(err){\r\n                            console.log(err);\r\n                        }\r\n                        if(label?.length>10) {\r\n                            if(label.split(\" \").length>1)\r\n                                label = extractAcronym(label).slice(0,3);          \r\n                            else\r\n                                label = label.slice(0,7);\r\n                        }\r\n                        //DEBUG: console.log(`label: ${label} avatar: ${avatar}`);\r\n\r\n                        return {avatar, label};\r\n                    }));\r\n                    setChatThumbnails(thumbnails);\r\n                }\r\n        }\r\n        fetchChatThumbnails();\r\n    }, [chatList,user]);\r\n\r\n    const openChat =(chatIndex)=>{\r\n        console.log(\"opening chat\", chatIndex);\r\n        props.setChatSelected(chatIndex);\r\n    }\r\n    \r\n    if(loading) return <div>Loading...</div>;\r\n    \r\n    return(\r\n    <div className=\"docked-container\" id=\"chat-list-container\">\r\n        <ul className=\"chat-list\">\r\n            {chatThumbnails.map((thumbnail, index) => (\r\n                <li onClick={(e)=>openChat(chatList[index]._id)} className=\"grouped chat-item\" id=\"chat-i\" key={index}>\r\n                    <img id=\"chat-avatar\" src={thumbnail.avatar} alt={thumbnail.label} />\r\n                    <ScreenTitle title={thumbnail.label} designClass=\"chat-title\"/>\r\n                </li>\r\n            ))}\r\n        </ul>    \r\n    </div>\r\n\r\n    );\r\n}","import { useContext, useEffect, useState } from \"react\";\r\n\r\n//Context and tools\r\nimport { findAvatarDB, findUserNameDB } from \"../../firebase/ReadWriteDB\";\r\nimport { userContext } from \"../../UserProvider\";\r\nimport { timeSincePost } from \"../../utils\";\r\n\r\n//Components and styles\r\nimport \"./Message.css\";\r\n\r\nexport default function Message(props){\r\n    const [avatar, setAvatar] = useState(\"\");\r\n    const [userName, setUsername] = useState(\"\");\r\n    const {message} = props\r\n    const {user, fetchUserPFP} = useContext(userContext);\r\n\r\n    useEffect(()=>{\r\n        const fetchAvatarAndUsername = async () => {\r\n            try{\r\n                const avatar = await findAvatarDB(message.author);\r\n                const username = await findUserNameDB(message.author);\r\n                if(avatar.includes(\"static\")) \r\n                    setAvatar(avatar);\r\n                else{\r\n                    const fetchedAvatar = await fetchUserPFP(avatar, false);\r\n                    if(fetchedAvatar)\r\n                        setAvatar(fetchedAvatar);\r\n                }\r\n                setUsername(username);\r\n            }\r\n            catch(err){\r\n                console.log(err);\r\n            }\r\n        }\r\n        fetchAvatarAndUsername();\r\n    }, [message.author, fetchUserPFP]);\r\n\r\n\r\n    return(\r\n        <li className=\"message grouped\">\r\n            {message.author === user?.uid\r\n            ? (\r\n                <>\r\n                    <img src={avatar} alt={`message-avatar`} id=\"message-avatar\"/>\r\n                    <div className=\"message-content\">\r\n                        <div className=\"message-time\">{timeSincePost(message.timestamp)}</div>\r\n                        <div className=\"chat-bubble\">\r\n                            <div className=\"message-username\"><strong>{userName}</strong></div>\r\n                            <div className=\"message-text\">{message.content}</div>\r\n                        </div>\r\n                    </div>\r\n                </>\r\n            )\r\n            : (\r\n                <>\r\n                <div className=\"message-content\">\r\n                    <div className=\"message-time right\">{timeSincePost(message.timestamp)}</div>\r\n                    <div className=\"chat-bubble right\">\r\n                        <div className=\"message-username right\"><strong>{userName}</strong></div>\r\n                        <div className=\"message-text right\">{message.content}</div>\r\n                    </div>\r\n                </div>\r\n                <img src={avatar} alt={`message-avatar`} id=\"message-avatar\"/>\r\n                </>\r\n            )}\r\n            \r\n        </li>\r\n    );\r\n}","import { useContext, useEffect, useRef, useState } from 'react';\r\nimport {io} from 'socket.io-client';\r\nimport axiosInstance from '../../axiosInstance';\r\nimport { userContext } from '../../UserProvider';\r\nimport Message from '../Message/Message';\r\nimport Field from '../base-components/Field/Field';\r\n\r\nimport \"./ChatRoom.css\"\r\n\r\n\r\n\r\n\r\nexport default function ChatRoom(props){\r\n    \r\n    const socketRef = useRef(null);\r\n    const [messages, setMessages] = useState([]);\r\n    const [input, setInput] = useState('');\r\n    const {user, token} = useContext(userContext);\r\n    const endRef = useRef(null);\r\n    const {chatId} = props;\r\n    const [joined, setJoined] = useState(false);\r\n\r\n    useEffect(() => {\r\n        const fetchMessage = async () => {\r\n            setMessages([]);\r\n            \r\n            try{\r\n                console.log(`Attempting to pull messages for chat ${chatId}`);\r\n                const response = await axiosInstance.get(`/chats/${chatId}`);\r\n                if (response.status===200){\r\n                    console.log(response.data.message);\r\n                    //DEBUG: console.log(response.data.messages);\r\n                    setMessages(response.data.messages);\r\n                }\r\n            }\r\n            catch(err){\r\n                console.log(err);\r\n                console.log(err.response?.data?.message);\r\n            }\r\n        }\r\n        fetchMessage();\r\n    },[chatId]);\r\n\r\n\r\n    useEffect(() => {\r\n        if(!chatId || !token) return;\r\n        const socket = io('http://localhost:42069');\r\n        socketRef.current = socket; \r\n        \r\n        if(socket.current===null) {\r\n            console.log(`socket is null`);\r\n            return;};\r\n        //console.log(`token: ${token}`);\r\n       \r\n        socket.emit('authenticate', token);\r\n\r\n        \r\n        socket.on('authenticated', (response)=>{ \r\n            console.log(response?.message);\r\n            socket.emit('joinChat', chatId);\r\n        });\r\n        \r\n        socket.on('joinedChat', (response)=>{ console.log(response?.message); setJoined(true);});\r\n\r\n        socket.on('message', (msg) => {\r\n            //DEBUG: console.log(socket.id);\r\n            //DEBUG: console.log(msg.content);\r\n            setMessages(prev=>[...prev, msg]);\r\n        });\r\n\r\n        socket.on('error', (errObj) =>{\r\n            console.log(errObj?.message);            \r\n        });\r\n\r\n        return () => {\r\n          if(socketRef.current){\r\n            socketRef.current.disconnect();\r\n            socketRef.current = null;\r\n          }\r\n          setJoined(false);\r\n          setMessages([]);\r\n        }\r\n    },[chatId, token]);\r\n\r\n    useEffect(() => {\r\n        endRef.current?.scrollIntoView({behavior: \"smooth\"});\r\n    },[messages]);\r\n\r\n    const sendMessage = async () => {\r\n        if(!input.trim() || !joined){\r\n            console.log(`input is empty`);\r\n            if(!joined)\r\n                console.log(`not joined`);\r\n            return; //Empty string.\r\n        } \r\n        socketRef.current.emit('message', {author: user.uid, content: input, chat: chatId});\r\n        setInput('');\r\n    }\r\n    return(\r\n    <div className=\"chat-room\">\r\n        <ul className=\"messages\">\r\n            {(messages.length>0) && messages.map((message,index)=>(<Message key={index} message={message}/>))}\r\n        </ul>\r\n        <div ref={endRef}></div>\r\n        <div className=\"chat-input grouped\">\r\n            <Field value={input} onChange={(e)=>setInput(e.target.value)} prompt=\"Message...\"\r\n                onKeyDown={(e)=> e.key===\"Enter\" && sendMessage()}/>\r\n            <button onClick={sendMessage}>Send</button>\r\n        </div>\r\n    </div>\r\n\r\n    );\r\n}","import {  useEffect, useState } from \"react\";\r\n//import {useContext} from \"react\";\r\nimport { useNavigate, useParams } from \"react-router-dom\";\r\n\r\n//Context and tools\r\n//import { userContext } from \"../../UserProvider\";\r\nimport { useRequireAuth } from \"../../hooks/useRequireAuth\";\r\n\r\n//Components and styles\r\nimport bg from \"../../assets/images/scrollableBackground.png\";\r\nimport ChatList from \"../../components/ChatList/ChatList\";\r\nimport ChatRoom from \"../../components/ChatRoom/ChatRoom\";\r\nimport SideMenu from \"../../components/SideMenu/SideMenu\";\r\nimport NavigationBar from \"../../components/base-components/NavigationBar/NavigationBar\";\r\nimport BackgroundWrapper from \"../../components/base-components/BackgroundWrapper\";\r\nimport Field from \"../../components/base-components/Field/Field\";\r\nimport \"./Chat.css\";\r\n\r\nexport default function Chat({miniView = false}){\r\n    \r\n    const {chatId} = useParams();\r\n    const [chatSelected, setChatSelected] = useState(chatId || null);\r\n    const navigation = useNavigate();\r\n    //const {user} = useContext(userContext);\r\n    useRequireAuth();\r\n\r\n    useEffect(()=>{\r\n        if(chatId!==chatSelected) setChatSelected(chatId);\r\n    },[chatId, chatSelected]);\r\n\r\n\r\n    const handleChatSelect = (id)=>{\r\n        setChatSelected(id);\r\n        navigation(`/chat/${id}`);\r\n        \r\n    }\r\n    \r\n    if( miniView)\r\n        return (<ChatList setChatSelected={handleChatSelect}/>)\r\n\r\n    return(\r\n        <BackgroundWrapper\r\n            title=\"Chat\"\r\n            backgroundImage = {bg}\r\n            backgroundPosition = \"top center\"\r\n            backgroundRepeat=\"repeat-y\"\r\n            backgroundAttachment = \"scroll\"\r\n            >\r\n\r\n            <div className=\"chat\">\r\n                <NavigationBar/>\r\n                <SideMenu/>\r\n                <div className=\"page-container\" id=\"chat-container\">\r\n                    <div className=\"grouped\">\r\n                        <Field type=\"text\" prompt=\"Search...\" styleClass=\"search-bar\" styleId=\"chat-search\"/>\r\n                        <button>Search</button>\r\n                    </div>\r\n                    {chatSelected  && (<ChatRoom chatId={chatSelected} />) }   \r\n                </div>\r\n                <ChatList setChatSelected={handleChatSelect}/>\r\n            </div>\r\n        </BackgroundWrapper>\r\n    );\r\n}","\r\n\r\n// Context and tools\r\nimport { useRequireAuth } from \"../../hooks/useRequireAuth\";\r\nimport \"../../utils.css\";\r\n\r\n//Compononets and styles\r\nimport \"./Home.css\";\r\n//import CardForm from \"../CardForm/CardForm\";\r\n//import CardTable from \"../CardTable/CardTable\";\r\nimport BackgroundWrapper from \"../../components/base-components/BackgroundWrapper\";\r\nimport bg from \"../../assets/images/scrollableBackground.png\";\r\nimport NavigationBar from \"../../components/base-components/NavigationBar/NavigationBar\";\r\nimport PostFeed from \"../../components/PostFeed/PostFeed\";\r\nimport SideMenu from \"../../components/SideMenu/SideMenu\"; \r\nimport Chat from \"../Chat/Chat\";\r\n\r\n/**\r\n * A component that renders the main page of the application. The page is\r\n * divided into two sections. The top section contains a CardForm component\r\n * that allows the user to add a new row to the table. The bottom section\r\n * contains a CardTable component that displays the table with the rows that\r\n * the user has entered. The component uses the useState hook to store the\r\n * data in the table and the useEffect hook to fetch the data when the\r\n * component is mounted. The data is fetched from the reqres.in API. The\r\n * component also sets the page title and the background image of the page\r\n * when it is mounted.\r\n * \r\n * @returns A JSX element representing the Home component.\r\n */\r\nexport default function Home() {\r\n\r\n    useRequireAuth();\r\n\r\n    return (\r\n        //Setting page general attributes\r\n        <BackgroundWrapper\r\n            title=\"Home\"\r\n            backgroundImage = {bg}\r\n            backgroundPosition = \"top center\"\r\n            backgroundRepeat=\"repeat-y\"\r\n            backgroundAttachment = \"scroll\"\r\n            >\r\n\r\n            <div className=\"home\">\r\n                <NavigationBar/>\r\n                <div className=\"page-container\" id=\"home-container\">\r\n                    <SideMenu />\r\n                    <PostFeed type=\"all\"/>\r\n                    <Chat miniView={true}/>\r\n                </div>\r\n            </div>\r\n        </BackgroundWrapper>\r\n    );\r\n}","import { useState, startTransition, useContext } from \"react\";\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { signInWithEmailAndPassword } from \"firebase/auth\";\r\nimport {auth} from \"../../firebase/FireBase\";\r\n\r\n// Context and tools\r\nimport { writeToListDB } from '../../firebase/ReadWriteDB';\r\n\r\n\r\n//Compononets and styles\r\nimport BackgroundWrapper from \"../base-components/BackgroundWrapper\";\r\nimport ScreenTitle from \"../base-components/ScreenTitle/ScreenTitle\";\r\nimport FormField from \"../base-components/FormField/FormField\";\r\nimport \"./LoginForm.css\";\r\nimport \"../../utils.css\";\t\r\nimport bg from\"../../assets/images/Fox_in_forest_background.png\";\r\nimport { userContext } from \"../../UserProvider\";\r\n\r\nexport default function LoginForm() {\r\n    \r\n    const [email , setEmail] = useState(\"\");\r\n    const [password , setPassword] = useState(\"\");\r\n    const navigation = useNavigate();\r\n    const {refreshStaleActivityVal} = useContext(userContext);\r\n\r\n    const handleSignIn = async (e) => {\r\n        e.preventDefault();\r\n       \r\n        try{\r\n            await signInWithEmailAndPassword(auth, email , password);\r\n            if (refreshStaleActivityVal.current){\r\n                refreshStaleActivityVal.current();\r\n            } \r\n            else{\r\n                console.log(\"No refreshStalActiviyFunction found.\");\r\n            }\r\n            writeToListDB(`/presence/`, auth.currentUser.uid);\r\n            alert(\"Signed In Successfully\");\r\n\r\n        }\r\n        catch(error){\r\n            alert(error.message);\r\n            console.log(error);}\r\n    }\r\n\r\n    const goTo = (path) => {\r\n        startTransition(() => {\r\n            navigation(path);\r\n        });\r\n    }\r\n\r\n\r\n    return (\r\n        <BackgroundWrapper\r\n            title=\"Login\"\r\n            backgroundImage = {bg}\r\n            backgroundPosition = \"center\"\r\n            transition=\"background-image 0.5s ease-in-out\"\r\n            className=\"center-container\">\r\n                \r\n            <div className=\"login auth-form-container\">\r\n                <ScreenTitle title=\"Login\"/>\r\n                <FormField type=\"email\" value={email} prompt=\"Email\" onChange={(e) => setEmail(e.target.value)}/>\r\n                <FormField type=\"password\" value={password} prompt=\"Password\" onChange={(e) => setPassword(e.target.value)}/>\r\n                <input className=\"submit-button\" onClick={handleSignIn} type=\"submit\" value=\"Sign in\"/>\r\n                <div className=\"links-group\">\r\n                    <button onClick={() => goTo(\"/\")}>Forgot Password</button>\r\n                    <button onClick={() => goTo(\"/signup\")}>Sign Up</button>\r\n                </div>\r\n            </div>\r\n        </BackgroundWrapper>\r\n    );\r\n}","\"use client\";\r\nimport { useContext } from \"react\";\r\n\r\n// Context and tools\r\nimport { userContext } from \"./UserProvider\";\r\nimport \"./utils.css\";\r\n\r\n// Components  \r\nimport Home from \"./pages/Home/Home\";\r\nimport LoginForm from \"./components/LoginForm/LoginForm\";\r\n\r\n\r\n/**\r\n * A component that renders the main page of the application. If the user is \r\n * signed in, the component renders the Home component. If the user is not \r\n * signed in, the component renders the LoginForm component. The component \r\n * uses the userContext to determine if the user is signed in.\r\n * \r\n * @returns A JSX element representing the Dashboard component.\r\n */\r\nfunction Dashboard() {\r\n\r\n    const { user } = useContext(userContext);\r\n\r\n    return (\r\n        <div>\r\n            { user ? (<Home/>):(<LoginForm/>)\r\n            }\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Dashboard;"],"names":["FormField","props","showPassword","setShowPassword","useState","isPassword","type","hasContent","value","trim","length","_jsxs","className","styleClass","children","_jsx","name","title","onChange","required","prompt","onClick","prev","src","hide","show","alt","useRequireAuth","user","loading","useContext","userContext","isAuthenticated","setIsAuthenticated","navigate","useNavigate","useEffect","console","log","path","options","arguments","undefined","startTransition","goto","ChatList","chatThumbnails","setChatThumbnails","chatList","setChatList","async","response","axiosInstance","get","uid","status","data","chats","err","_err$response","_err$response$data","message","fetchChatList","thumbnails","Promise","all","map","_label","avatar","chatItem","isGroupChat","findAvatarDB","creator","participants","find","member","label","group","_id","findUserNameDB","split","extractAcronym","slice","fetchChatThumbnails","id","thumbnail","index","e","openChat","chatIndex","setChatSelected","ScreenTitle","designClass","Message","setAvatar","userName","setUsername","fetchUserPFP","author","username","includes","fetchedAvatar","fetchAvatarAndUsername","_Fragment","timeSincePost","timestamp","content","ChatRoom","socketRef","useRef","messages","setMessages","input","setInput","token","endRef","chatId","joined","setJoined","fetchMessage","socket","io","current","emit","on","msg","errObj","disconnect","_endRef$current","scrollIntoView","behavior","sendMessage","chat","ref","Field","target","onKeyDown","key","Chat","_ref","miniView","useParams","chatSelected","navigation","handleChatSelect","BackgroundWrapper","backgroundImage","bg","backgroundPosition","backgroundRepeat","backgroundAttachment","NavigationBar","SideMenu","styleId","Home","PostFeed","LoginForm","email","setEmail","password","setPassword","refreshStaleActivityVal","goTo","transition","preventDefault","signInWithEmailAndPassword","auth","writeToListDB","currentUser","alert","error"],"sourceRoot":""}