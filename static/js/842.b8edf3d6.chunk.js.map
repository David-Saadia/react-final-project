{"version":3,"file":"static/js/842.b8edf3d6.chunk.js","mappings":"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","sources":["components/base-components/FormField/FormField.js","components/SettingsCard/SettingsCard.js","pages/Settings/Settings.js","hooks/useRequireAuth.js","components/ChatList/ChatList.js","components/Message/Message.js","components/ChatRoom/ChatRoom.js","pages/Chat/Chat.js","components/base-components/TabbedContent/TabbedContent.js"],"sourcesContent":["import { useState } from \"react\";\r\n\r\nimport \"./FormField.css\";\r\nimport show from \"../../../assets/images/icons/show-password-icon.png\";\r\nimport hide from \"../../../assets/images/icons/hide-password-icon.png\";\r\n\r\n\r\n/**\r\n * FormField: A base component for a form field, which includes a label and a corresponding input field.\r\n * The label is displayed as a tooltip when the input field is focused or has input.\r\n * The input field is required.\r\n * @param {Object} props - The properties for the FormField component.\r\n * @param {String} props.type - The type of the input field, e.g. \"text\", \"password\", etc.\r\n * @param {String} props.value - The value of the input field.\r\n * @param {Function} props.onChange - The callback function when the input field's value changes.\r\n * @param {String} props.prompt - The label for the input field.\r\n * @param {String} props.styleClass - Any additional CSS classes to be added to the component's root element.\r\n */\r\n\r\nexport default function FormField(props){\r\n    const [showPassword , setShowPassword] = useState(false);\r\n    const isPassword = props.type === \"password\";\r\n    const hasContent = props.value && props.value.trim().length > 0;\r\n    return(\r\n        <div className={`form-field ${props.styleClass}`} >\r\n            <input  name={props.type} \r\n                    type={isPassword && showPassword? \"text\" : props.type} \r\n                    title= {props.type} \r\n                    value={props.value} \r\n                    onChange={props.onChange} required/>\r\n            <span className={`popup_text ${hasContent ? \"has-content\" : \"\"}`}>{props.prompt}</span>\r\n            {isPassword && \r\n                <span onClick={() => setShowPassword(prev => !prev)}>\r\n                        <img  className=\"toggle-password\" src={showPassword ?hide:show} alt=\"password toggle\"/> </span>\r\n            }\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\n","import { useContext, useEffect, useState } from \"react\";\r\n\r\nimport axiosInstance from \"../../axiosInstance\";\r\nimport { userContext } from \"../../UserProvider\";\r\nimport { findUserNameDB, writeToDB } from \"../../firebase/ReadWriteDB\";\r\n\r\n\r\nimport ScreenTitle from \"../base-components/ScreenTitle/ScreenTitle\";\r\nimport TabbedContent from \"../base-components/TabbedContent/TabbedContent\";\r\nimport Field from \"../base-components/Field/Field\";\r\nimport ImageSelector from \"../base-components/ImageSelector/ImageSelector\";\r\nimport \"./SettingsCard.css\"\r\nimport FormField from \"../base-components/FormField/FormField\";\r\nimport { updatePassword } from \"firebase/auth\";\r\n\r\n\r\n\r\n\r\nexport default function SettingsCard(props){\r\n\r\n    const {user, avatar} = useContext(userContext);\r\n    const [newProfilePic, setNewProfilePic] = useState(null);\r\n    const [newUserName, setNewUserName] = useState(\"\");\r\n    const [displayUserName, setDisplayUserName] = useState(\"\");\r\n    const [newPassword, setNewPassword] = useState(\"\");\r\n    const [confirmPassword, setConfirmPassword] = useState(\"\");\r\n\r\n    useEffect(()=>{\r\n        const fetchUsername = async ()=>{\r\n            try{\r\n                const userName = await findUserNameDB(user.uid);\r\n                console.log(`userName: ${userName}`);\r\n                setDisplayUserName(userName);\r\n            }\r\n            catch(err){\r\n                console.log(err);\r\n            }\r\n        }\r\n\r\n        fetchUsername();\r\n    },[user]);\r\n\r\n    const changeProfilePic = async ()=>{\r\n        try{\r\n            if(newProfilePic===null) return;\r\n            const formData = new FormData();\r\n            formData.append(\"image\", newProfilePic);\r\n            formData.append(\"filePath\" ,\"/pfps\")\r\n            const response = await axiosInstance.post(\"/upload/image\", formData);\r\n            if (response.status===201){\r\n                console.log(response.data.message);\r\n                await writeToDB(`/users/${user.uid}/settings/avatar`, response.data.file._id);\r\n                alert(\"Profile picture changed successfully.\");\r\n                }\r\n            }\r\n            catch(err){\r\n                console.log(err);\r\n                console.log(err.response?.data?.message);\r\n            }\r\n            \r\n        }\r\n\r\n        const changeUserName = async ()=>{\r\n            try{\r\n                if(newUserName===\"\") return;\r\n                await writeToDB(`/users/${user.uid}/settings/username`, newUserName);\r\n                alert(\"Username changed successfully.\");\r\n                setNewUserName(\"\");\r\n                setDisplayUserName(newUserName);\r\n            }\r\n            catch(err){\r\n                console.log(err);\r\n                console.log(err.response?.data?.message);\r\n            }\r\n        }\r\n\r\n        const changePassword = async ()=>{\r\n            try{\r\n                if(newPassword===\"\" || confirmPassword===\"\") return;\r\n                if(newPassword!==confirmPassword) return alert(\"Passwords do not match.\");\r\n                await updatePassword(user, newPassword);\r\n                alert(\"Password changed successfully.\");\r\n                setNewPassword(\"\");\r\n                setConfirmPassword(\"\");\r\n            }\r\n            catch(err){\r\n                console.log(err);\r\n                console.log(err.response?.data?.message);\r\n            }\r\n        }\r\n    \r\n\r\n        const onSubmit = async(e, type)=>{\r\n            e.preventDefault();\r\n            if(type===\"primary\"){\r\n                await changeProfilePic();\r\n                await changeUserName();\r\n            }\r\n            else if(type===\"credentials\"){\r\n                await changePassword();\r\n            }\r\n        }\r\n\r\n\r\n    return(\r\n        <div className=\"center-container  settings-card\">\r\n            <ScreenTitle designClass=\"settings-title\"title=\"User Settings\"/>\r\n            <section className=\"user-primary-info\">\r\n                <img className=\"settings-avatar\" alt=\"avatar\" src={avatar}/>\r\n                <ScreenTitle designClass=\"settings-user-name\" title={displayUserName} />\r\n                <button className=\"submit-button change-primary-btn\">Change</button>\r\n            </section>\r\n            <div className=\"settings-divider\"/>\r\n            <section className=\"credentials-change\">\r\n                <ScreenTitle designClass=\"settings-user-name\" title=\"Change Credentials\"/>\r\n                <button className=\"submit-button change-credentials-btn\">Change</button>\r\n            </section>\r\n            <div className=\"settings-divider\"/>\r\n            <TabbedContent tabs={[\"Primary\",\"Credentials\"]} tabsContent={[\r\n                <form className=\"primary-details-form\">\r\n                    <Field type=\"text\" value={newUserName} onChange={(e)=>setNewUserName(e.target.value)} prompt=\"New Username\" />\r\n                    <ImageSelector onSelectImage={(image)=>setNewProfilePic(image)}/>\r\n                    <button className=\"submit-button\" onClick={(e)=>onSubmit(e, \"primary\")}>Submit</button>\r\n                </form>,\r\n                <form className=\"credentials-form\">\r\n                    <FormField type=\"password\" value={newPassword} onChange={(e)=>setNewPassword(e.target.value)} prompt=\"New Password\" />\r\n                    <FormField type=\"password\" value={confirmPassword} onChange={(e)=>setConfirmPassword(e.target.value)} prompt=\"Confirm Password\" />\r\n                    <button className=\"submit-button\" onClick={(e)=>onSubmit(e, \"credentials\")}>Submit</button>\r\n                </form>  \r\n                ]}/>\r\n            <div className=\"settings-divider\"/>\r\n            <section className=\"delete-account\">\r\n                <span>Delete Account</span>\r\n                <button className=\"submit-button delete-btn\">Delete</button>\r\n            </section>\r\n\r\n        </div>\r\n    );\r\n}","import bg from \"../../assets/images/scrollableBackground.png\";\r\nimport BackgroundWrapper from \"../../components/base-components/BackgroundWrapper\";\r\nimport NavigationBar from \"../../components/base-components/NavigationBar/NavigationBar\";\r\nimport SettingsCard from \"../../components/SettingsCard/SettingsCard\";\r\nimport SideMenu from \"../../components/SideMenu/SideMenu\";\r\n\r\nimport Chat from \"../Chat/Chat\";\r\n\r\nexport default function Settings(props) {\r\n\r\n\r\n\r\n    return(\r\n        //Setting page general attributes\r\n        <BackgroundWrapper\r\n            title=\"Settings Page\"\r\n            backgroundImage = {bg}\r\n            backgroundPosition = \"top center\"\r\n            backgroundRepeat=\"repeat-y\"\r\n            backgroundAttachment = \"scroll\"\r\n            >\r\n\r\n            <div className=\"settings\">\r\n                <NavigationBar/>\r\n                <div className=\"page-container\" id=\"home-container\">\r\n                    <SideMenu />\r\n                    <SettingsCard/>\r\n                    <Chat miniView={true}/>\r\n                </div>\r\n            </div>\r\n        </BackgroundWrapper>\r\n    );\r\n}","\r\n//**This componet will be used to verify user's authentication and redirect\r\n// the user to the home page if authentication expires, instead of implementing this \r\n// redirection logic in every component, we'll just include this hook in every page component */\r\n\r\nimport { startTransition, useContext, useEffect, useState } from \"react\";\r\nimport { userContext } from \"../UserProvider\";\r\nimport { useNavigate } from \"react-router-dom\";\r\n\r\n\r\nexport function useRequireAuth(){\r\n    const {user, loading} = useContext(userContext);\r\n    const [isAuthenticated, setIsAuthenticated] = useState(false);\r\n\r\n    \r\n    const navigate = useNavigate();\r\n    \r\n    useEffect(()=>{   \r\n        const goto = (path, options={}) => {\r\n            startTransition(() => {\r\n                navigate(path, options);\r\n            });\r\n        };\r\n\r\n        if(loading) return <div>Loading...</div>;\r\n    \r\n        if(user)\r\n            setIsAuthenticated(true);\r\n        if(!isAuthenticated && !loading) \r\n            console.log(\"User is not authenticated, redirecting...\");\r\n        if(!loading && !user)\r\n            goto(\"/\");\r\n            \r\n    },[user,loading, navigate, isAuthenticated]);\r\n}","import { useContext, useEffect, useState } from \"react\";\r\n\r\n//Context and tools\r\nimport { userContext } from \"../../UserProvider\";\r\nimport { extractAcronym } from \"../../utils\";\r\nimport { findAvatarDB, findUserNameDB } from \"../../firebase/ReadWriteDB\";\r\nimport axiosInstance from \"../../axiosInstance\";\r\n\r\n//Components and styles\r\nimport \"./ChatList.css\"\r\nimport ScreenTitle from \"../base-components/ScreenTitle/ScreenTitle\";\r\n\r\n\r\nexport default function ChatList(props){\r\n\r\n    \r\n    const [chatThumbnails, setChatThumbnails] = useState([]);\r\n    const {user, loading} = useContext(userContext);\r\n    const [chatList, setChatList] = useState([]);\r\n    \r\n    useEffect(()=>{\r\n        const fetchChatList = async () => {\r\n            const limit = 20;\r\n            try{\r\n                const response = await axiosInstance.get(`/chats/?userId=${user.uid}&limit=${limit}`);\r\n                if (response.status===200){\r\n                    //DEBUG: console.log(response.data.message);\r\n                    //DEBUG: console.log(response.data.chats);\r\n                    setChatList(response.data.chats);\r\n                }\r\n            }\r\n            catch(err){\r\n                console.log(err);\r\n                console.log(err.response?.data?.message);\r\n            }\r\n        }\r\n        fetchChatList();\r\n    }, [user]);\r\n    \r\n    useEffect(() => {\r\n        const fetchChatThumbnails = async (limit=-1) => {\r\n                if(limit<0 && chatList){\r\n                    //DEBUG: console.log(\"Attempting to pull users's chats list names/images\")\r\n                    const thumbnails = await Promise.all(chatList.map(async (chatItem) => {\r\n                        const avatar = chatItem.isGroupChat\r\n                        ? await findAvatarDB(chatItem.creator)\r\n                        : await findAvatarDB(chatItem.participants.find(member => member !== user?.uid));\r\n\r\n                        //DEBUG: console.log(avatar);\r\n                        //DEBUG: console.log(chatItem);\r\n                        let label = \"N/A\"\r\n                        try{\r\n                            if(!chatItem.isGroupChat) \r\n                                label = await findUserNameDB(chatItem.participants.find(member => member !== user?.uid));\r\n                            else{\r\n                                const response = await axiosInstance.get(`/groups/search/${chatItem.group._id}`);\r\n                                if(response.status===200){\r\n                                    label = response.data.group.name;\r\n                                    //DEBUG console.log(label);\r\n                                }\r\n                            }\r\n                        }catch(err){\r\n                            console.log(err);\r\n                        }\r\n                        if(label?.length>10) {\r\n                            if(label.split(\" \").length>1)\r\n                                label = extractAcronym(label).slice(0,3);          \r\n                            else\r\n                                label = label.slice(0,7);\r\n                        }\r\n                        //DEBUG: console.log(`label: ${label} avatar: ${avatar}`);\r\n\r\n                        return {avatar, label};\r\n                    }));\r\n                    setChatThumbnails(thumbnails);\r\n                }\r\n        }\r\n        fetchChatThumbnails();\r\n    }, [chatList,user]);\r\n\r\n    const openChat =(chatIndex)=>{\r\n        console.log(\"opening chat\", chatIndex);\r\n        props.setChatSelected(chatIndex);\r\n    }\r\n    \r\n    if(loading) return <div>Loading...</div>;\r\n    \r\n    return(\r\n    <div className=\"docked-container\" id=\"chat-list-container\">\r\n        <ul className=\"chat-list\">\r\n            {chatThumbnails.map((thumbnail, index) => (\r\n                <li onClick={(e)=>openChat(chatList[index]._id)} className=\"grouped chat-item\" id=\"chat-i\" key={index}>\r\n                    <img id=\"chat-avatar\" src={thumbnail.avatar} alt={thumbnail.label} />\r\n                    <ScreenTitle title={thumbnail.label} designClass=\"chat-title\"/>\r\n                </li>\r\n            ))}\r\n        </ul>    \r\n    </div>\r\n\r\n    );\r\n}","import { useContext, useEffect, useState } from \"react\";\r\n\r\n//Context and tools\r\nimport { findAvatarDB, findUserNameDB } from \"../../firebase/ReadWriteDB\";\r\nimport { userContext } from \"../../UserProvider\";\r\nimport { timeSincePost } from \"../../utils\";\r\n\r\n//Components and styles\r\nimport \"./Message.css\";\r\n\r\nexport default function Message(props){\r\n    const [avatar, setAvatar] = useState(\"\");\r\n    const [userName, setUsername] = useState(\"\");\r\n    const {message} = props\r\n    const {user, fetchUserPFP} = useContext(userContext);\r\n\r\n    useEffect(()=>{\r\n        const fetchAvatarAndUsername = async () => {\r\n            try{\r\n                const avatar = await findAvatarDB(message.author);\r\n                const username = await findUserNameDB(message.author);\r\n                if(avatar.includes(\"static\")) \r\n                    setAvatar(avatar);\r\n                else{\r\n                    const fetchedAvatar = await fetchUserPFP(avatar, false);\r\n                    if(fetchedAvatar)\r\n                        setAvatar(fetchedAvatar);\r\n                }\r\n                setUsername(username);\r\n            }\r\n            catch(err){\r\n                console.log(err);\r\n            }\r\n        }\r\n        fetchAvatarAndUsername();\r\n    }, [message.author, fetchUserPFP]);\r\n\r\n\r\n    return(\r\n        <li className=\"message grouped\">\r\n            {message.author === user?.uid\r\n            ? (\r\n                <>\r\n                    <img src={avatar} alt={`message-avatar`} id=\"message-avatar\"/>\r\n                    <div className=\"message-content\">\r\n                        <div className=\"message-time\">{timeSincePost(message.timestamp)}</div>\r\n                        <div className=\"chat-bubble\">\r\n                            <div className=\"message-username\"><strong>{userName}</strong></div>\r\n                            <div className=\"message-text\">{message.content}</div>\r\n                        </div>\r\n                    </div>\r\n                </>\r\n            )\r\n            : (\r\n                <>\r\n                <div className=\"message-content\">\r\n                    <div className=\"message-time right\">{timeSincePost(message.timestamp)}</div>\r\n                    <div className=\"chat-bubble right\">\r\n                        <div className=\"message-username right\"><strong>{userName}</strong></div>\r\n                        <div className=\"message-text right\">{message.content}</div>\r\n                    </div>\r\n                </div>\r\n                <img src={avatar} alt={`message-avatar`} id=\"message-avatar\"/>\r\n                </>\r\n            )}\r\n            \r\n        </li>\r\n    );\r\n}","import { useContext, useEffect, useRef, useState } from 'react';\r\nimport {io} from 'socket.io-client';\r\nimport axiosInstance from '../../axiosInstance';\r\nimport { userContext } from '../../UserProvider';\r\nimport Message from '../Message/Message';\r\nimport Field from '../base-components/Field/Field';\r\n\r\nimport \"./ChatRoom.css\"\r\n\r\n\r\n\r\n\r\nexport default function ChatRoom(props){\r\n    \r\n    const socketRef = useRef(null);\r\n    const [messages, setMessages] = useState([]);\r\n    const [input, setInput] = useState('');\r\n    const {user, token} = useContext(userContext);\r\n    const endRef = useRef(null);\r\n    const {chatId} = props;\r\n    const [joined, setJoined] = useState(false);\r\n\r\n    useEffect(() => {\r\n        const fetchMessage = async () => {\r\n            setMessages([]);\r\n            \r\n            try{\r\n                console.log(`Attempting to pull messages for chat ${chatId}`);\r\n                const response = await axiosInstance.get(`/chats/${chatId}`);\r\n                if (response.status===200){\r\n                    console.log(response.data.message);\r\n                    //DEBUG: console.log(response.data.messages);\r\n                    setMessages(response.data.messages);\r\n                }\r\n            }\r\n            catch(err){\r\n                console.log(err);\r\n                console.log(err.response?.data?.message);\r\n            }\r\n        }\r\n        fetchMessage();\r\n    },[chatId]);\r\n\r\n\r\n    useEffect(() => {\r\n        if(!chatId || !token) return;\r\n        const socket = io('http://localhost:42069');\r\n        socketRef.current = socket; \r\n        \r\n        if(socket.current===null) {\r\n            console.log(`socket is null`);\r\n            return;};\r\n        //console.log(`token: ${token}`);\r\n       \r\n        socket.emit('authenticate', token);\r\n\r\n        \r\n        socket.on('authenticated', (response)=>{ \r\n            console.log(response?.message);\r\n            socket.emit('joinChat', chatId);\r\n        });\r\n        \r\n        socket.on('joinedChat', (response)=>{ console.log(response?.message); setJoined(true);});\r\n\r\n        socket.on('message', (msg) => {\r\n            //DEBUG: console.log(socket.id);\r\n            //DEBUG: console.log(msg.content);\r\n            setMessages(prev=>[...prev, msg]);\r\n        });\r\n\r\n        socket.on('error', (errObj) =>{\r\n            console.log(errObj?.message);            \r\n        });\r\n\r\n        return () => {\r\n          if(socketRef.current){\r\n            socketRef.current.disconnect();\r\n            socketRef.current = null;\r\n          }\r\n          setJoined(false);\r\n          setMessages([]);\r\n        }\r\n    },[chatId, token]);\r\n\r\n    useEffect(() => {\r\n        endRef.current?.scrollIntoView({behavior: \"smooth\"});\r\n    },[messages]);\r\n\r\n    const sendMessage = async () => {\r\n        if(!input.trim() || !joined){\r\n            console.log(`input is empty`);\r\n            if(!joined)\r\n                console.log(`not joined`);\r\n            return; //Empty string.\r\n        } \r\n        socketRef.current.emit('message', {author: user.uid, content: input, chat: chatId});\r\n        setInput('');\r\n    }\r\n    return(\r\n    <div className=\"chat-room\">\r\n        <ul className=\"messages\">\r\n            {(messages.length>0) && messages.map((message,index)=>(<Message key={index} message={message}/>))}\r\n        </ul>\r\n        <div ref={endRef}></div>\r\n        <div className=\"chat-input grouped\">\r\n            <Field value={input} onChange={(e)=>setInput(e.target.value)} prompt=\"Message...\"\r\n                onKeyDown={(e)=> e.key===\"Enter\" && sendMessage()}/>\r\n            <button onClick={sendMessage}>Send</button>\r\n        </div>\r\n    </div>\r\n\r\n    );\r\n}","import {  useEffect, useState } from \"react\";\r\n//import {useContext} from \"react\";\r\nimport { useNavigate, useParams } from \"react-router-dom\";\r\n\r\n//Context and tools\r\n//import { userContext } from \"../../UserProvider\";\r\nimport { useRequireAuth } from \"../../hooks/useRequireAuth\";\r\n\r\n//Components and styles\r\nimport bg from \"../../assets/images/scrollableBackground.png\";\r\nimport ChatList from \"../../components/ChatList/ChatList\";\r\nimport ChatRoom from \"../../components/ChatRoom/ChatRoom\";\r\nimport SideMenu from \"../../components/SideMenu/SideMenu\";\r\nimport NavigationBar from \"../../components/base-components/NavigationBar/NavigationBar\";\r\nimport BackgroundWrapper from \"../../components/base-components/BackgroundWrapper\";\r\nimport Field from \"../../components/base-components/Field/Field\";\r\nimport \"./Chat.css\";\r\n\r\nexport default function Chat({miniView = false}){\r\n    \r\n    const {chatId} = useParams();\r\n    const [chatSelected, setChatSelected] = useState(chatId || null);\r\n    const navigation = useNavigate();\r\n    //const {user} = useContext(userContext);\r\n    useRequireAuth();\r\n\r\n    useEffect(()=>{\r\n        if(chatId!==chatSelected) setChatSelected(chatId);\r\n    },[chatId, chatSelected]);\r\n\r\n\r\n    const handleChatSelect = (id)=>{\r\n        setChatSelected(id);\r\n        navigation(`/chat/${id}`);\r\n        \r\n    }\r\n    \r\n    if( miniView)\r\n        return (<ChatList setChatSelected={handleChatSelect}/>)\r\n\r\n    return(\r\n        <BackgroundWrapper\r\n            title=\"Chat\"\r\n            backgroundImage = {bg}\r\n            backgroundPosition = \"top center\"\r\n            backgroundRepeat=\"repeat-y\"\r\n            backgroundAttachment = \"scroll\"\r\n            >\r\n\r\n            <div className=\"chat\">\r\n                <NavigationBar/>\r\n                <SideMenu/>\r\n                <div className=\"page-container\" id=\"chat-container\">\r\n                    <div className=\"grouped\">\r\n                        <Field type=\"text\" prompt=\"Search...\" styleClass=\"search-bar\" styleId=\"chat-search\"/>\r\n                        <button>Search</button>\r\n                    </div>\r\n                    {chatSelected  && (<ChatRoom chatId={chatSelected} />) }   \r\n                </div>\r\n                <ChatList setChatSelected={handleChatSelect}/>\r\n            </div>\r\n        </BackgroundWrapper>\r\n    );\r\n}","import { useState } from \"react\";\r\n\r\nimport \"./TabbedContent.css\";\r\n\r\n/**\r\n * TabbedContent: A functional component that creates a tabbed interface.\r\n * Given an array of strings (tab names) and an array of JSX elements (content),\r\n * it will create a tabbed interface with the given tab names and content,\r\n * and will switch between the content based on the selected tab.\r\n * The component will automatically default to the first tab.\r\n * @param {object} props - The properties for the TabbedContent component.\r\n * @param {string[]} props.tabs - An array of tab names.\r\n * @param {JSX.Element[]} props.content - An array of JSX elements to be used as the content for each tab.\r\n * @param {string} [props.tabStyleId] - An optional string to be used as the CSS id for each tab.\r\n */\r\nexport default function TabbedContent(props){\r\n\r\n    const [tab, setTab] = useState(props.tabs[0]); //Default to first tab\r\n\r\n    return(\r\n    <>\r\n        <div className=\"tabs\">\r\n            {props.tabs.map((tabItem, index)=>\r\n                <button key={index} className={`tab-link ${tab===tabItem? \"active\": \"\"}`} id={props.tabStyleId?? \"\"} onClick={() => setTab(tabItem)}>{tabItem.charAt(0).toUpperCase() + tabItem.slice(1)}</button>\r\n            )}\r\n        </div>\r\n\r\n            {props.tabsContent?.map((content, index)=>\r\n\r\n            <div key={index} className={`tab-content ${tab===props.tabs[index]? \"active\": \"\"}`} id={`tab-${props.tabs[index]}`}>\r\n                {content}\r\n            </div>\r\n            )}\r\n          \r\n    </>);\r\n}"],"names":["FormField","props","showPassword","setShowPassword","useState","isPassword","type","hasContent","value","trim","length","_jsxs","className","styleClass","children","_jsx","name","title","onChange","required","prompt","onClick","prev","src","hide","show","alt","SettingsCard","user","avatar","useContext","userContext","newProfilePic","setNewProfilePic","newUserName","setNewUserName","displayUserName","setDisplayUserName","newPassword","setNewPassword","confirmPassword","setConfirmPassword","useEffect","async","userName","findUserNameDB","uid","console","log","err","fetchUsername","onSubmit","e","preventDefault","formData","FormData","append","response","axiosInstance","post","status","data","message","writeToDB","file","_id","alert","_err$response","_err$response$data","changeProfilePic","_err$response2","_err$response2$data","changeUserName","updatePassword","_err$response3","_err$response3$data","changePassword","ScreenTitle","designClass","TabbedContent","tabs","tabsContent","Field","target","ImageSelector","onSelectImage","image","Settings","BackgroundWrapper","backgroundImage","bg","backgroundPosition","backgroundRepeat","backgroundAttachment","NavigationBar","id","SideMenu","Chat","miniView","useRequireAuth","loading","isAuthenticated","setIsAuthenticated","navigate","useNavigate","path","options","arguments","undefined","startTransition","goto","ChatList","chatThumbnails","setChatThumbnails","chatList","setChatList","get","chats","fetchChatList","thumbnails","Promise","all","map","_label","chatItem","isGroupChat","findAvatarDB","creator","participants","find","member","label","group","split","extractAcronym","slice","fetchChatThumbnails","thumbnail","index","openChat","chatIndex","setChatSelected","Message","setAvatar","setUsername","fetchUserPFP","author","username","includes","fetchedAvatar","fetchAvatarAndUsername","_Fragment","timeSincePost","timestamp","content","ChatRoom","socketRef","useRef","messages","setMessages","input","setInput","token","endRef","chatId","joined","setJoined","fetchMessage","socket","io","current","emit","on","msg","errObj","disconnect","_endRef$current","scrollIntoView","behavior","sendMessage","chat","ref","onKeyDown","key","_ref","useParams","chatSelected","navigation","handleChatSelect","styleId","_props$tabsContent","tab","setTab","tabItem","_props$tabStyleId","tabStyleId","charAt","toUpperCase"],"sourceRoot":""}