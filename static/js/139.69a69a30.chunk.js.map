{"version":3,"file":"static/js/139.69a69a30.chunk.js","mappings":"oPAae,SAASA,EAASC,GAG7B,MAAOC,EAAgBC,IAAqBC,EAAAA,EAAAA,UAAS,KAC/C,KAACC,EAAI,QAAEC,IAAWC,EAAAA,EAAAA,YAAWC,EAAAA,IAC5BC,EAAUC,IAAeN,EAAAA,EAAAA,UAAS,KAEzCO,EAAAA,EAAAA,YAAU,KACgBC,WAElB,IACI,MAAMC,QAAiBC,EAAAA,EAAcC,IAAI,kBAAkBV,EAAKW,gBAC1C,MAAlBH,EAASI,SACTC,QAAQC,IAAIN,EAASO,KAAKC,SAC1BH,QAAQC,IAAIN,EAASO,KAAKE,OAC1BZ,EAAYG,EAASO,KAAKE,OAElC,CACA,MAAMC,GAAK,IAADC,EAAAC,EACNP,QAAQC,IAAII,GACZL,QAAQC,IAAgB,QAAbK,EAACD,EAAIV,gBAAQ,IAAAW,GAAM,QAANC,EAAZD,EAAcJ,YAAI,IAAAK,OAAN,EAAZA,EAAoBJ,QACpC,GAEJK,EAAe,GAChB,CAACrB,KAEJM,EAAAA,EAAAA,YAAU,MACsBC,iBACpB,IADgCe,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,IAAE,GACzB,GAAKlB,EAAS,CACnBS,QAAQC,IAAI,sDACZ,MAAMW,QAAmBC,QAAQC,IAAIvB,EAASwB,KAAIrB,UAAqB,IAADsB,EAClE,MAAMC,EAASC,EAASC,kBAChBC,EAAAA,EAAAA,IAAaF,EAASG,eACtBD,EAAAA,EAAAA,IAAaF,EAASI,aAAaC,MAAKC,GAAUA,KAAe,OAAJrC,QAAI,IAAJA,OAAI,EAAJA,EAAMW,QAE3EE,QAAQC,IAAIgB,GACZjB,QAAQC,IAAIiB,GACZ,IAAIO,EAAQ,MACZ,IACI,GAAIP,EAASC,YAET,CACA,MAAMxB,QAAiBC,EAAAA,EAAcC,IAAI,kBAAkBqB,EAASQ,MAAMC,OACrD,MAAlBhC,EAASI,SACR0B,EAAQ9B,EAASO,KAAKwB,MAAME,KAC5B5B,QAAQC,IAAIwB,GAEpB,MAPIA,QAAcI,EAAAA,EAAAA,IAAeX,EAASI,aAAaC,MAAKC,GAAUA,KAAe,OAAJrC,QAAI,IAAJA,OAAI,EAAJA,EAAMW,OAQ3F,CAAC,MAAMO,GACHL,QAAQC,IAAII,EAChB,CAIA,OAHQ,QAALW,EAAAS,SAAK,IAAAT,OAAA,EAALA,EAAON,QAAO,KAAIe,GAAQK,EAAAA,EAAAA,IAAeL,GAAOM,MAAM,EAAE,IAC3D/B,QAAQC,IAAI,UAAUwB,aAAiBR,KAEhC,CAACA,SAAQQ,QAAM,KAE1BxC,EAAkB2B,EACtB,CACR,CACAoB,EAAqB,GACtB,CAACzC,EAASJ,IAOb,OAAGC,GAAgB6C,EAAAA,EAAAA,KAAA,OAAAC,SAAK,gBAGxBD,EAAAA,EAAAA,KAAA,OAAKE,UAAU,mBAAmBC,GAAG,sBAAqBF,UACtDD,EAAAA,EAAAA,KAAA,MAAIE,UAAU,YAAWD,SACpBlD,EAAe+B,KAAI,CAACsB,EAAWC,KAC5BC,EAAAA,EAAAA,MAAA,MAAIC,QAAUC,IAAIC,OAXbC,EAWsBpD,EAAS+C,GAAOX,IAVnD3B,QAAQC,IAAI,eAAgB0C,QAC5B5D,EAAM6D,gBAAgBD,GAFTA,KAW2C,EAACR,UAAU,oBAAoBC,GAAG,SAAQF,SAAA,EACtFD,EAAAA,EAAAA,KAAA,OAAKG,GAAG,cAAcS,IAAKR,EAAUpB,OAAQ6B,IAAKT,EAAUZ,SAC5DQ,EAAAA,EAAAA,KAACc,EAAAA,EAAW,CAACC,MAAOX,EAAUZ,MAAOwB,YAAY,iBAF2CX,QAShH,C,cCrFe,SAASY,EAAQnE,GAC5B,MAAOkC,EAAQkC,IAAajE,EAAAA,EAAAA,UAAS,KAC9BkE,EAAUC,IAAenE,EAAAA,EAAAA,UAAS,KACnC,QAACiB,GAAWpB,GACZ,KAACI,IAAQE,EAAAA,EAAAA,YAAWC,EAAAA,GAkB1B,OAhBAG,EAAAA,EAAAA,YAAU,KACyBC,WAC3B,IACI,MAAMuB,QAAeG,EAAAA,EAAAA,IAAajB,EAAQmD,QACpCC,QAAiB1B,EAAAA,EAAAA,IAAe1B,EAAQmD,QAC9CH,EAAUlC,GACVoC,EAAYE,EAChB,CACA,MAAMlD,GACFL,QAAQC,IAAII,EAChB,GAEJmD,EAAwB,GACzB,CAACrD,EAAQmD,UAIRrB,EAAAA,EAAAA,KAAA,MAAIE,UAAU,kBAAiBD,SAC1B/B,EAAQmD,UAAe,OAAJnE,QAAI,IAAJA,OAAI,EAAJA,EAAMW,MAEtByC,EAAAA,EAAAA,MAAAkB,EAAAA,SAAA,CAAAvB,SAAA,EACID,EAAAA,EAAAA,KAAA,OAAKY,IAAK5B,EAAQ6B,IAAK,iBAAkBV,GAAG,oBAC5CG,EAAAA,EAAAA,MAAA,OAAKJ,UAAU,kBAAiBD,SAAA,EAC5BD,EAAAA,EAAAA,KAAA,OAAKE,UAAU,eAAcD,UAAEwB,EAAAA,EAAAA,IAAcvD,EAAQwD,cACrDpB,EAAAA,EAAAA,MAAA,OAAKJ,UAAU,cAAaD,SAAA,EACxBD,EAAAA,EAAAA,KAAA,OAAKE,UAAU,mBAAkBD,UAACD,EAAAA,EAAAA,KAAA,UAAAC,SAASkB,OAC3CnB,EAAAA,EAAAA,KAAA,OAAKE,UAAU,eAAcD,SAAE/B,EAAQyD,oBAMnDrB,EAAAA,EAAAA,MAAAkB,EAAAA,SAAA,CAAAvB,SAAA,EACAK,EAAAA,EAAAA,MAAA,OAAKJ,UAAU,kBAAiBD,SAAA,EAC5BD,EAAAA,EAAAA,KAAA,OAAKE,UAAU,qBAAoBD,UAAEwB,EAAAA,EAAAA,IAAcvD,EAAQwD,cAC3DpB,EAAAA,EAAAA,MAAA,OAAKJ,UAAU,oBAAmBD,SAAA,EAC9BD,EAAAA,EAAAA,KAAA,OAAKE,UAAU,yBAAwBD,UAACD,EAAAA,EAAAA,KAAA,UAAAC,SAASkB,OACjDnB,EAAAA,EAAAA,KAAA,OAAKE,UAAU,qBAAoBD,SAAE/B,EAAQyD,iBAGrD3B,EAAAA,EAAAA,KAAA,OAAKY,IAAK5B,EAAQ6B,IAAK,iBAAkBV,GAAG,uBAM5D,C,cClDe,SAASyB,EAAS9E,GAE7B,MAAM+E,GAAYC,EAAAA,EAAAA,QAAO,OAClBC,EAAUC,IAAe/E,EAAAA,EAAAA,UAAS,KAClCgF,EAAOC,IAAYjF,EAAAA,EAAAA,UAAS,KAC7B,KAACC,EAAI,MAAEiF,IAAS/E,EAAAA,EAAAA,YAAWC,EAAAA,GAC3B+E,GAASN,EAAAA,EAAAA,QAAO,OAChB,OAACO,GAAUvF,GACVwF,EAAQC,IAAatF,EAAAA,EAAAA,WAAS,IAErCO,EAAAA,EAAAA,YAAU,KACeC,WACjBuE,EAAY,IAEZ,IACIjE,QAAQC,IAAI,wCAAwCqE,KACpD,MAAM3E,QAAiBC,EAAAA,EAAcC,IAAI,UAAUyE,KAC7B,MAAlB3E,EAASI,SACTC,QAAQC,IAAIN,EAASO,KAAKC,SAC1BH,QAAQC,IAAIN,EAASO,KAAK8D,UAC1BC,EAAYtE,EAASO,KAAK8D,UAElC,CACA,MAAM3D,GAAK,IAADC,EAAAC,EACNP,QAAQC,IAAII,GACZL,QAAQC,IAAgB,QAAbK,EAACD,EAAIV,gBAAQ,IAAAW,GAAM,QAANC,EAAZD,EAAcJ,YAAI,IAAAK,OAAN,EAAZA,EAAoBJ,QACpC,GAEJsE,EAAc,GAChB,CAACH,KAGH7E,EAAAA,EAAAA,YAAU,KACN,IAAI6E,IAAWF,EAAO,OACtB,MAAMM,GAASC,EAAAA,EAAAA,IAAG,0BAGlB,GAFAb,EAAUc,QAAUF,EAEA,OAAjBA,EAAOE,QAyBV,OApBAF,EAAOG,KAAK,eAAgBT,GAG5BM,EAAOI,GAAG,iBAAkBnF,IACxBK,QAAQC,IAAY,OAARN,QAAQ,IAARA,OAAQ,EAARA,EAAUQ,SACtBuE,EAAOG,KAAK,WAAYP,EAAO,IAGnCI,EAAOI,GAAG,cAAenF,IAAaK,QAAQC,IAAY,OAARN,QAAQ,IAARA,OAAQ,EAARA,EAAUQ,SAAUqE,GAAU,EAAK,IAErFE,EAAOI,GAAG,WAAYC,IAClB/E,QAAQC,IAAIyE,EAAOtC,IACnBpC,QAAQC,IAAI8E,EAAInB,SAChBK,GAAYe,GAAM,IAAIA,EAAMD,IAAK,IAGrCL,EAAOI,GAAG,SAAUG,IAChBjF,QAAQC,IAAU,OAANgF,QAAM,IAANA,OAAM,EAANA,EAAQ9E,QAAQ,IAGzB,KACF2D,EAAUc,UACXd,EAAUc,QAAQM,aAClBpB,EAAUc,QAAU,MAEtBJ,GAAU,GACVP,EAAY,GAAG,EA9BbjE,QAAQC,IAAI,iBA+Bf,GACH,CAACqE,EAAQF,KAEX3E,EAAAA,EAAAA,YAAU,KAAO,IAAD0F,EACE,QAAdA,EAAAd,EAAOO,eAAO,IAAAO,GAAdA,EAAgBC,eAAe,CAACC,SAAU,UAAU,GACtD,CAACrB,IAEH,MAAMsB,EAAc5F,UAChB,IAAIwE,EAAMqB,SAAWhB,EAIjB,OAHAvE,QAAQC,IAAI,uBACRsE,GACAvE,QAAQC,IAAI,eAGpB6D,EAAUc,QAAQC,KAAK,UAAW,CAACvB,OAAQnE,EAAKW,IAAK8D,QAASM,EAAOsB,KAAMlB,IAC3EH,EAAS,GAAG,EAEhB,OACA5B,EAAAA,EAAAA,MAAA,OAAKJ,UAAU,YAAWD,SAAA,EACtBD,EAAAA,EAAAA,KAAA,MAAIE,UAAU,WAAUD,SAClB8B,EAAStD,OAAO,GAAMsD,EAASjD,KAAI,CAACZ,EAAQmC,KAASL,EAAAA,EAAAA,KAACiB,EAAO,CAAa/C,QAASA,GAAhBmC,QAEzEL,EAAAA,EAAAA,KAAA,OAAKwD,IAAKpB,KACV9B,EAAAA,EAAAA,MAAA,OAAKJ,UAAU,qBAAoBD,SAAA,EAC/BD,EAAAA,EAAAA,KAACyD,EAAAA,EAAK,CAACC,MAAOzB,EAAO0B,SAAWnD,GAAI0B,EAAS1B,EAAEoD,OAAOF,OAAQG,OAAO,aACjEC,UAAYtD,GAAa,UAARA,EAAEuD,KAAiBV,OACxCrD,EAAAA,EAAAA,KAAA,UAAQO,QAAS8C,EAAYpD,SAAC,cAK1C,C,kCChGe,SAAS+D,EAAIC,GAAqB,IAApB,SAACC,GAAW,GAAMD,EAE3C,MAAM,OAAC5B,IAAU8B,EAAAA,EAAAA,MACVC,EAAczD,IAAmB1D,EAAAA,EAAAA,UAASoF,GAAU,MACrDgC,GAAaC,EAAAA,EAAAA,OACb,KAACpH,IAAQE,EAAAA,EAAAA,YAAWC,EAAAA,IAE1BG,EAAAA,EAAAA,YAAU,KACH6E,IAAS+B,GAAczD,EAAgB0B,EAAO,GACnD,CAACA,EAAQ+B,KAGX5G,EAAAA,EAAAA,YAAU,KACDN,GACDmH,EAAW,IACf,GACD,CAACnH,EAAMmH,IAIV,MAAME,EAAoBpE,IACtBQ,EAAgBR,GAChBkE,EAAW,SAASlE,IAAK,EAI7B,OAAI+D,GACQlE,EAAAA,EAAAA,KAACnD,EAAQ,CAAC8D,gBAAiB4D,KAGnCvE,EAAAA,EAAAA,KAACwE,EAAAA,EAAiB,CACdzD,MAAM,OACN0D,gBAAmBC,EACnBC,mBAAqB,aACrBC,iBAAiB,WACjBC,qBAAuB,SAAQ5E,UAG/BK,EAAAA,EAAAA,MAAA,OAAKJ,UAAU,OAAMD,SAAA,EACjBD,EAAAA,EAAAA,KAAC8E,EAAAA,EAAa,KACd9E,EAAAA,EAAAA,KAAC+E,EAAAA,EAAQ,KACTzE,EAAAA,EAAAA,MAAA,OAAKJ,UAAU,iBAAiBC,GAAG,iBAAgBF,SAAA,EAC/CK,EAAAA,EAAAA,MAAA,OAAKJ,UAAU,UAASD,SAAA,EACpBD,EAAAA,EAAAA,KAACyD,EAAAA,EAAK,CAACuB,KAAK,OAAOnB,OAAO,YAAYoB,WAAW,aAAaC,QAAQ,iBACtElF,EAAAA,EAAAA,KAAA,UAAAC,SAAQ,cAEXmE,IAAkBpE,EAAAA,EAAAA,KAAC4B,EAAQ,CAACS,OAAQ+B,QAEzCpE,EAAAA,EAAAA,KAACnD,EAAQ,CAAC8D,gBAAiB4D,QAI3C,C","sources":["components/ChatList/ChatList.js","components/Message/Message.js","components/ChatRoom/ChatRoom.js","pages/Chat/Chat.js"],"sourcesContent":["import { useContext, useEffect, useState } from \"react\";\r\n\r\n//Context and tools\r\nimport { userContext } from \"../../UserProvider\";\r\nimport axiosInstance from \"../../axiosInstance\";\r\n\r\n//Components and styles\r\nimport \"./ChatList.css\"\r\nimport { findAvatarDB, findUserNameDB } from \"../../firebase/ReadWriteDB\";\r\nimport { extractAcronym } from \"../../utils\";\r\nimport ScreenTitle from \"../base-components/ScreenTitle/ScreenTitle\";\r\n\r\n\r\nexport default function ChatList(props){\r\n\r\n    \r\n    const [chatThumbnails, setChatThumbnails] = useState([]);\r\n    const {user, loading} = useContext(userContext);\r\n    const [chatList, setChatList] = useState([]);\r\n    \r\n    useEffect(()=>{\r\n        const fetchChatList = async () => {\r\n            const limit = 20;\r\n            try{\r\n                const response = await axiosInstance.get(`/chats/?userId=${user.uid}&limit=${limit}`);\r\n                if (response.status===200){\r\n                    console.log(response.data.message);\r\n                    console.log(response.data.chats);\r\n                    setChatList(response.data.chats);\r\n                }\r\n            }\r\n            catch(err){\r\n                console.log(err);\r\n                console.log(err.response?.data?.message);\r\n            }\r\n        }\r\n        fetchChatList();\r\n    }, [user]);\r\n    \r\n    useEffect(() => {\r\n        const fetchChatThumbnails = async (limit=-1) => {\r\n                if(limit<0 && chatList){\r\n                    console.log(\"Attempting to pull users's chats list names/images\")\r\n                    const thumbnails = await Promise.all(chatList.map(async (chatItem) => {\r\n                        const avatar = chatItem.isGroupChat\r\n                        ? await findAvatarDB(chatItem.creator)\r\n                        : await findAvatarDB(chatItem.participants.find(member => member !== user?.uid));\r\n\r\n                        console.log(avatar);\r\n                        console.log(chatItem);\r\n                        let label = \"N/A\"\r\n                        try{\r\n                            if(!chatItem.isGroupChat) \r\n                                label = await findUserNameDB(chatItem.participants.find(member => member !== user?.uid));\r\n                            else{\r\n                                const response = await axiosInstance.get(`/groups/search/${chatItem.group._id}`);\r\n                                if(response.status===200){\r\n                                    label = response.data.group.name;\r\n                                    console.log(label);\r\n                                }\r\n                            }\r\n                        }catch(err){\r\n                            console.log(err);\r\n                        }\r\n                        if(label?.length>10) label = extractAcronym(label).slice(0,3);\r\n                        console.log(`label: ${label} avatar: ${avatar}`);\r\n\r\n                        return {avatar, label};\r\n                    }));\r\n                    setChatThumbnails(thumbnails);\r\n                }\r\n        }\r\n        fetchChatThumbnails();\r\n    }, [chatList,user]);\r\n\r\n    const openChat =(chatIndex)=>{\r\n        console.log(\"opening chat\", chatIndex);\r\n        props.setChatSelected(chatIndex);\r\n    }\r\n    \r\n    if(loading) return <div>Loading...</div>;\r\n    \r\n    return(\r\n    <div className=\"docked-container\" id=\"chat-list-container\">\r\n        <ul className=\"chat-list\">\r\n            {chatThumbnails.map((thumbnail, index) => (\r\n                <li onClick={(e)=>openChat(chatList[index]._id)} className=\"grouped chat-item\" id=\"chat-i\" key={index}>\r\n                    <img id=\"chat-avatar\" src={thumbnail.avatar} alt={thumbnail.label} />\r\n                    <ScreenTitle title={thumbnail.label} designClass=\"chat-title\"/>\r\n                </li>\r\n            ))}\r\n        </ul>    \r\n    </div>\r\n\r\n    );\r\n}","import { useContext, useEffect, useState } from \"react\";\r\n\r\n//Context and tools\r\nimport { findAvatarDB, findUserNameDB } from \"../../firebase/ReadWriteDB\";\r\nimport { userContext } from \"../../UserProvider\";\r\nimport { timeSincePost } from \"../../utils\";\r\n\r\n//Components and styles\r\nimport \"./Message.css\";\r\n\r\nexport default function Message(props){\r\n    const [avatar, setAvatar] = useState(\"\");\r\n    const [userName, setUsername] = useState(\"\");\r\n    const {message} = props\r\n    const {user} = useContext(userContext);\r\n\r\n    useEffect(()=>{\r\n        const fetchAvatarAndUsername = async () => {\r\n            try{\r\n                const avatar = await findAvatarDB(message.author);\r\n                const username = await findUserNameDB(message.author);\r\n                setAvatar(avatar);\r\n                setUsername(username);\r\n            }\r\n            catch(err){\r\n                console.log(err);\r\n            }\r\n        }\r\n        fetchAvatarAndUsername();\r\n    }, [message.author]);\r\n\r\n\r\n    return(\r\n        <li className=\"message grouped\">\r\n            {message.author === user?.uid\r\n            ? (\r\n                <>\r\n                    <img src={avatar} alt={`message-avatar`} id=\"message-avatar\"/>\r\n                    <div className=\"message-content\">\r\n                        <div className=\"message-time\">{timeSincePost(message.timestamp)}</div>\r\n                        <div className=\"chat-bubble\">\r\n                            <div className=\"message-username\"><strong>{userName}</strong></div>\r\n                            <div className=\"message-text\">{message.content}</div>\r\n                        </div>\r\n                    </div>\r\n                </>\r\n            )\r\n            : (\r\n                <>\r\n                <div className=\"message-content\">\r\n                    <div className=\"message-time right\">{timeSincePost(message.timestamp)}</div>\r\n                    <div className=\"chat-bubble right\">\r\n                        <div className=\"message-username right\"><strong>{userName}</strong></div>\r\n                        <div className=\"message-text right\">{message.content}</div>\r\n                    </div>\r\n                </div>\r\n                <img src={avatar} alt={`message-avatar`} id=\"message-avatar\"/>\r\n                </>\r\n            )}\r\n            \r\n        </li>\r\n    );\r\n}","import { useContext, useEffect, useRef, useState } from 'react';\r\nimport {io} from 'socket.io-client';\r\nimport axiosInstance from '../../axiosInstance';\r\nimport { userContext } from '../../UserProvider';\r\nimport Message from '../Message/Message';\r\nimport Field from '../base-components/Field/Field';\r\n\r\nimport \"./ChatRoom.css\"\r\n\r\n\r\n\r\n\r\nexport default function ChatRoom(props){\r\n    \r\n    const socketRef = useRef(null);\r\n    const [messages, setMessages] = useState([]);\r\n    const [input, setInput] = useState('');\r\n    const {user, token} = useContext(userContext);\r\n    const endRef = useRef(null);\r\n    const {chatId} = props;\r\n    const [joined, setJoined] = useState(false);\r\n\r\n    useEffect(() => {\r\n        const fetchMessage = async () => {\r\n            setMessages([]);\r\n            \r\n            try{\r\n                console.log(`Attempting to pull messages for chat ${chatId}`);\r\n                const response = await axiosInstance.get(`/chats/${chatId}`);\r\n                if (response.status===200){\r\n                    console.log(response.data.message);\r\n                    console.log(response.data.messages);\r\n                    setMessages(response.data.messages);\r\n                }\r\n            }\r\n            catch(err){\r\n                console.log(err);\r\n                console.log(err.response?.data?.message);\r\n            }\r\n        }\r\n        fetchMessage();\r\n    },[chatId]);\r\n\r\n\r\n    useEffect(() => {\r\n        if(!chatId || !token) return;\r\n        const socket = io('http://localhost:42069');\r\n        socketRef.current = socket; \r\n        \r\n        if(socket.current===null) {\r\n            console.log(`socket is null`);\r\n            return;};\r\n        //console.log(`token: ${token}`);\r\n       \r\n        socket.emit('authenticate', token);\r\n\r\n        \r\n        socket.on('authenticated', (response)=>{ \r\n            console.log(response?.message);\r\n            socket.emit('joinChat', chatId);\r\n        });\r\n        \r\n        socket.on('joinedChat', (response)=>{ console.log(response?.message); setJoined(true);});\r\n\r\n        socket.on('message', (msg) => {\r\n            console.log(socket.id);\r\n            console.log(msg.content);\r\n            setMessages(prev=>[...prev, msg]);\r\n        });\r\n\r\n        socket.on('error', (errObj) =>{\r\n            console.log(errObj?.message);            \r\n        });\r\n\r\n        return () => {\r\n          if(socketRef.current){\r\n            socketRef.current.disconnect();\r\n            socketRef.current = null;\r\n          }\r\n          setJoined(false);\r\n          setMessages([]);\r\n        }\r\n    },[chatId, token]);\r\n\r\n    useEffect(() => {\r\n        endRef.current?.scrollIntoView({behavior: \"smooth\"});\r\n    },[messages]);\r\n\r\n    const sendMessage = async () => {\r\n        if(!input.trim() || !joined){\r\n            console.log(`input is empty`);\r\n            if(!joined)\r\n                console.log(`not joined`);\r\n            return; //Empty string.\r\n        } \r\n        socketRef.current.emit('message', {author: user.uid, content: input, chat: chatId});\r\n        setInput('');\r\n    }\r\n    return(\r\n    <div className=\"chat-room\">\r\n        <ul className=\"messages\">\r\n            {(messages.length>0) && messages.map((message,index)=>(<Message key={index} message={message}/>))}\r\n        </ul>\r\n        <div ref={endRef}></div>\r\n        <div className=\"chat-input grouped\">\r\n            <Field value={input} onChange={(e)=>setInput(e.target.value)} prompt=\"Message...\"\r\n                onKeyDown={(e)=> e.key===\"Enter\" && sendMessage()}/>\r\n            <button onClick={sendMessage}>Send</button>\r\n        </div>\r\n    </div>\r\n\r\n    );\r\n}","import { useContext, useEffect, useState } from \"react\";\r\nimport { useNavigate, useParams } from \"react-router-dom\";\r\n\r\n//Context and tools\r\nimport { userContext } from \"../../UserProvider\";\r\n\r\n//Components and styles\r\nimport bg from \"../../assets/images/scrollableBackground.png\";\r\nimport ChatList from \"../../components/ChatList/ChatList\";\r\nimport ChatRoom from \"../../components/ChatRoom/ChatRoom\";\r\nimport SideMenu from \"../../components/SideMenu/SideMenu\";\r\nimport NavigationBar from \"../../components/base-components/NavigationBar/NavigationBar\";\r\nimport BackgroundWrapper from \"../../components/base-components/BackgroundWrapper\";\r\nimport Field from \"../../components/base-components/Field/Field\";\r\nimport \"./Chat.css\";\r\n\r\nexport default function Chat({miniView = false}){\r\n    \r\n    const {chatId} = useParams();\r\n    const [chatSelected, setChatSelected] = useState(chatId || null);\r\n    const navigation = useNavigate();\r\n    const {user} = useContext(userContext);\r\n\r\n    useEffect(()=>{\r\n        if(chatId!==chatSelected) setChatSelected(chatId);\r\n    },[chatId, chatSelected]);\r\n\r\n\r\n    useEffect(() => {\r\n        if (!user) {\r\n            navigation(\"/\");\r\n        }\r\n    }, [user, navigation]);\r\n\r\n\r\n\r\n    const handleChatSelect = (id)=>{\r\n        setChatSelected(id);\r\n        navigation(`/chat/${id}`);\r\n        \r\n    }\r\n    \r\n    if( miniView)\r\n        return (<ChatList setChatSelected={handleChatSelect}/>)\r\n\r\n    return(\r\n        <BackgroundWrapper\r\n            title=\"Chat\"\r\n            backgroundImage = {bg}\r\n            backgroundPosition = \"top center\"\r\n            backgroundRepeat=\"repeat-y\"\r\n            backgroundAttachment = \"scroll\"\r\n            >\r\n\r\n            <div className=\"chat\">\r\n                <NavigationBar/>\r\n                <SideMenu/>\r\n                <div className=\"page-container\" id=\"chat-container\">\r\n                    <div className=\"grouped\">\r\n                        <Field type=\"text\" prompt=\"Search...\" styleClass=\"search-bar\" styleId=\"chat-search\"/>\r\n                        <button>Search</button>\r\n                    </div>\r\n                    {chatSelected  && (<ChatRoom chatId={chatSelected} />) }   \r\n                </div>\r\n                <ChatList setChatSelected={handleChatSelect}/>\r\n            </div>\r\n        </BackgroundWrapper>\r\n    );\r\n}"],"names":["ChatList","props","chatThumbnails","setChatThumbnails","useState","user","loading","useContext","userContext","chatList","setChatList","useEffect","async","response","axiosInstance","get","uid","status","console","log","data","message","chats","err","_err$response","_err$response$data","fetchChatList","arguments","length","undefined","thumbnails","Promise","all","map","_label","avatar","chatItem","isGroupChat","findAvatarDB","creator","participants","find","member","label","group","_id","name","findUserNameDB","extractAcronym","slice","fetchChatThumbnails","_jsx","children","className","id","thumbnail","index","_jsxs","onClick","e","openChat","chatIndex","setChatSelected","src","alt","ScreenTitle","title","designClass","Message","setAvatar","userName","setUsername","author","username","fetchAvatarAndUsername","_Fragment","timeSincePost","timestamp","content","ChatRoom","socketRef","useRef","messages","setMessages","input","setInput","token","endRef","chatId","joined","setJoined","fetchMessage","socket","io","current","emit","on","msg","prev","errObj","disconnect","_endRef$current","scrollIntoView","behavior","sendMessage","trim","chat","ref","Field","value","onChange","target","prompt","onKeyDown","key","Chat","_ref","miniView","useParams","chatSelected","navigation","useNavigate","handleChatSelect","BackgroundWrapper","backgroundImage","bg","backgroundPosition","backgroundRepeat","backgroundAttachment","NavigationBar","SideMenu","type","styleClass","styleId"],"sourceRoot":""}