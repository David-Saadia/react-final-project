{"version":3,"file":"static/js/522.e08dd29f.chunk.js","mappings":"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","sources":["components/base-components/TabbedContent/TabbedContent.js","components/GroupCard/GroupCard.js","pages/Groups/Groups.js"],"sourcesContent":["import { useState } from \"react\";\r\n\r\nimport \"./TabbedContent.css\";\r\n\r\n/**\r\n * TabbedContent: A functional component that creates a tabbed interface.\r\n * Given an array of strings (tab names) and an array of JSX elements (content),\r\n * it will create a tabbed interface with the given tab names and content,\r\n * and will switch between the content based on the selected tab.\r\n * The component will automatically default to the first tab.\r\n * @param {object} props - The properties for the TabbedContent component.\r\n * @param {string[]} props.tabs - An array of tab names.\r\n * @param {JSX.Element[]} props.content - An array of JSX elements to be used as the content for each tab.\r\n * @param {string} [props.tabStyleId] - An optional string to be used as the CSS id for each tab.\r\n */\r\nexport default function TabbedContent(props){\r\n\r\n    const [tab, setTab] = useState(props.tabs[0]); //Default to first tab\r\n\r\n    return(\r\n    <>\r\n        <div className=\"tabs\">\r\n            {props.tabs.map((tabItem, index)=>\r\n                <button key={index} className={`tab-link ${tab===tabItem? \"active\": \"\"}`} id={props.tabStyleId?? \"\"} onClick={() => setTab(tabItem)}>{tabItem.charAt(0).toUpperCase() + tabItem.slice(1)}</button>\r\n            )}\r\n        </div>\r\n\r\n            {props.tabsContent?.map((content, index)=>\r\n\r\n            <div key={index} className={`tab-content ${tab===props.tabs[index]? \"active\": \"\"}`} id={`tab-${props.tabs[index]}`}>\r\n                {content}\r\n            </div>\r\n            )}\r\n          \r\n    </>);\r\n}","import { startTransition, useContext, useEffect, useState } from \"react\";\r\n\r\n//Context and tools\r\nimport { userContext } from \"../../UserProvider\";\r\nimport { findAvatarDB, findUserNameDB } from \"../../firebase/ReadWriteDB\";\r\nimport axiosInstance from \"../../axiosInstance\";\r\n\r\n//Components and styles\r\nimport ScreenTitle from \"../base-components/ScreenTitle/ScreenTitle\";\r\nimport PopupModal, { ConfigureGroupWindow, InviteWindow, MembersListWindow } from \"../base-components/PopupModal/PopupModal\";\r\nimport TabbedContent from \"../base-components/TabbedContent/TabbedContent\";\r\nimport \"./GroupCard.css\"\r\nimport { useNavigate } from \"react-router-dom\";\r\n\r\n/**\r\n * \r\n * @param {object} props - Object to contain key-value pairs of arguments for the function.\r\n * @param {string} props.groupID \r\n * @param {string} props.chatID \r\n * @param {string} props.creationDate \r\n * @param {string} props.creator\r\n * @param {string} props.groupName\r\n * @param {string} props.groupImage\r\n * @param {[string]} props.members\r\n * @param {[string]} props.admins\r\n * @returns \r\n */\r\nexport default function GroupCard(props){\r\n\r\n    const {user} = useContext(userContext);\r\n    const {creator, creationDate, groupID, chatID} = props //Don't change - no need for useState.\r\n    const [groupName, setGroupName] = useState(props.groupName);\r\n    const [groupImage, setGroupImage] = useState(\"\");\r\n    const [members, setMembers] = useState(props.members);\r\n    const [membersAvatars, setMembersAvatars] = useState([]);\r\n    const [membersUsernames, setMembersUsernames] = useState([]);\r\n    const [admins, setAdmins] = useState(props.admins);\r\n    const [isPopupOpen, setIsPopupOpen] = useState(false);\r\n    const [joinRequests, setJoinRequests] = useState(props.joinRequests);\r\n    const navigation = useNavigate();\r\n\r\n    const goTo = (path) => {\r\n        startTransition(() => {\r\n            navigation(path);\r\n        });\r\n    }\r\n    \r\n\r\n    useEffect(()=>{\r\n        const fetchGroupImage = async ()=>{\r\n            const img = props.groupImage? props.groupImage: await findAvatarDB(creator);\r\n            setGroupImage(img);\r\n        }\r\n\r\n        const fetchMembersImages = async (limit=-1) =>{\r\n            if(limit<0 && members){\r\n                const avatars = await Promise.all(members.map(async (member)=>{\r\n                    const avatar = await findAvatarDB(member);\r\n                    return avatar;\r\n                }));\r\n                setMembersAvatars(avatars);\r\n            }\r\n        }\r\n\r\n        const fetchMembersUsernames = async (limit=-1) =>{ \r\n            if(limit<0 && members){\r\n                const usernames = await Promise.all(members.map(async (member)=>{\r\n                    const username = await findUserNameDB(member);\r\n                    return {username,uid:member};\r\n                }));\r\n                setMembersUsernames(usernames);\r\n            }\r\n        }\r\n        fetchGroupImage();\r\n        fetchMembersImages();\r\n        fetchMembersUsernames();\r\n        \r\n    },[props.groupImage, creator, members]);\r\n\r\n\r\n    useEffect(()=>{\r\n        const fetchJoinRequestsData = async ()=>{\r\n            if(!joinRequests || joinRequests.length===0) return;\r\n\r\n            const data = await Promise.all(joinRequests.map(async (member)=>{\r\n                if(typeof member !== \"string\") return;\r\n                const username = await findUserNameDB(member);\r\n                const avatar = await findAvatarDB(member);\r\n                //DEBUG: console.log(`username: ${username}, uid: ${member}, avatar: ${avatar}`);\r\n                return {username, uid:member, avatar}; \r\n            }));\r\n            setJoinRequests(data);\r\n        \r\n        }\r\n        fetchJoinRequestsData();\r\n\r\n    },[joinRequests])\r\n\r\n    const isJoined = ()=>{\r\n        return members && members.includes(user.uid);\r\n    }\r\n\r\n    const isAdmin = ()=>{\r\n        return admins && admins.includes(user.uid);\r\n    }\r\n\r\n    const deleteGroup = async ()=>{\r\n        try{\r\n            const response = await axiosInstance.delete(`/groups/${groupID}`); \r\n            if (response.status===200){\r\n                console.log(response.data.message);\r\n                alert(response.data.message);\r\n                props.onDelete();\r\n            }\r\n        }\r\n        catch(err){\r\n            console.log(err);\r\n            console.log(err.response?.data?.message);\r\n        }\r\n\r\n    }\r\n\r\n     const openPopup = ()=>{\r\n        setIsPopupOpen(true);\r\n    }\r\n\r\n    const closePopup = ()=>{\r\n        setIsPopupOpen(false);\r\n    }\r\n\r\n    const kickMember = async (kickedUID)=>{\r\n        try{\r\n            console.log(`Kicking ${kickedUID} by admin:${user.uid}`);\r\n            const response = await axiosInstance.delete(`/groups/kick/${kickedUID}?groupId=${groupID}`); \r\n            if (response.status===200){\r\n                console.log(response.data?.message);\r\n                alert(response.data?.message);\r\n                setMembers(response.data?.group?.members);\r\n            }\r\n        }\r\n        catch(err){\r\n            console.log(err);\r\n            console.log(err.response?.data?.message);\r\n        }\r\n\r\n    }\r\n\r\n    const renameGroup = async (newName) =>{\r\n        try{\r\n            console.log(`New group name: ${newName}`);\r\n            const response = await axiosInstance.put(`/groups/${groupID}`, {name:newName, admin:user.uid}); \r\n            if (response.status===200){\r\n                console.log(response.data.message);\r\n                alert(response.data.message);\r\n                setGroupName(newName);\r\n            }\r\n        }\r\n        catch(err){\r\n            console.log(err);\r\n            console.log(err.response?.data?.message);\r\n        }\r\n    }\r\n\r\n    const joinGroup = async ()=>{\r\n        try{\r\n            const payload = {groupId:groupID};\r\n            const response = await axiosInstance.post(`/groups/join/${user.uid}`, payload); \r\n            if (response.status===200){\r\n                console.log(response.data.message);\r\n                alert(response.data.message);\r\n            }\r\n        }\r\n        catch(err){\r\n            console.log(err);\r\n            console.log(err.response?.data?.message);\r\n        }\r\n    }\r\n\r\n    const leaveGroup = async ()=>{\r\n        try{\r\n            if (creator===user.uid){\r\n                deleteGroup();\r\n                return;\r\n            }\r\n            const response = await axiosInstance.delete(`/groups/leave/${user.uid}?groupId=${groupID}`); \r\n            if (response.status===200){\r\n                console.log(response.data.message);\r\n                alert(response.data.message);\r\n                setMembers(response.data?.group?.members);\r\n            }\r\n        }\r\n        catch(err){\r\n            console.log(err);\r\n            console.log(err.response?.data?.message);\r\n        }\r\n    }\r\n\r\n    const acceptMember = async(memberUID) =>{\r\n        try{\r\n            console.log(`Accepting ${memberUID} to group:${groupID}`);\r\n            const payload = {groupId:groupID};\r\n            const response = await axiosInstance.put(`/groups/accept/${memberUID}`, payload); \r\n            if (response.status===200){\r\n                console.log(response.data.message);\r\n                alert(response.data.message);\r\n                setMembers(response.data?.group?.members);\r\n                setJoinRequests(response.data?.group?.joinRequests);\r\n            }\r\n        }\r\n        catch(err){\r\n            console.log(err);\r\n            console.log(err.response?.data?.message);\r\n        }\r\n    }\r\n\r\n    const declineMember = async(memberUID) =>{\r\n        try{\r\n            console.log(`Rejecting ${memberUID}`);\r\n            const payload = {groupId:groupID};\r\n            const response = await axiosInstance.put(`/groups/decline/${memberUID}`, payload); \r\n            if (response.status===200){\r\n                console.log(response.data.message);\r\n                alert(response.data.message);\r\n                setMembers(response.data?.group?.members);\r\n                setJoinRequests(response.data?.group?.joinRequests);\r\n            }\r\n        }\r\n        catch(err){\r\n            console.log(err);\r\n            console.log(err.response?.data?.message);\r\n        }\r\n    }\r\n\r\n    const promoteMember = async(memberUID) =>{\r\n        try{\r\n            console.log(`Promoting ${memberUID} in group:${groupID}`);\r\n            const payload = {groupId:groupID};\r\n            const response = await axiosInstance.put(`/groups/promote/${memberUID}`, payload); \r\n            if (response.status===200){\r\n                console.log(response.data.message);\r\n                alert(response.data.message);\r\n                setMembers(response.data?.group?.members);\r\n                setAdmins(response.data?.group?.admins);\r\n            }\r\n        }\r\n        catch(err){\r\n            console.log(err);\r\n            console.log(err.response?.data?.message);\r\n        }\r\n    }\r\n\r\n    const updateUI = (newMembers)=>{\r\n        setMembers(newMembers);\r\n    }\r\n\r\n    return (\r\n        <div id=\"group-card\">\r\n          <div id=\"group-card-header\">\r\n            <div className=\"grouped\">\r\n                <img src={groupImage} alt=\"groupImage\"/>\r\n                <ScreenTitle title={groupName}/>\r\n            </div>\r\n            {isJoined() && (<button onClick={leaveGroup}>Leave</button>)}\r\n          </div>\r\n          <ul className=\"card-carousel\">\r\n            {membersAvatars && membersAvatars.map((avatar,index)=>{\r\n                if (index<5){\r\n                    return (  <li key={index} className=\"card-carousel-item\">\r\n                        <img src={avatar} alt=\"usersAvatar\"/>\r\n                    </li>);\r\n                }\r\n                else return null;\r\n            }\r\n            )}\r\n          </ul>\r\n          <div id=\"group-card-footer\">\r\n            { /*The logic here is basically: If not joined -> display Join. If joined, explore, if joined and admin, display manage/del*/\r\n            !isJoined() \r\n            ? (<button onClick={joinGroup}>Join</button>)\r\n            :(<div>\r\n                <button onClick={(e)=>goTo(`/groups/feed/${groupID}`)}>Explore</button>\r\n                <button onClick={(e)=>goTo(`/chat/${chatID}`)}>Chat</button>\r\n                {isAdmin() && (<div className=\"grouped\">\r\n                <button onClick={() => openPopup()}>Manage</button>\r\n                <button onClick={deleteGroup}>Delete</button>\r\n                </div>)}\r\n            </div> )}\r\n          </div>\r\n          <PopupModal isOpen={isPopupOpen} onClose={closePopup} styleId=\"invite-modal\">\r\n           <TabbedContent\r\n                tabs={[\"New Name\",\"Members\", \"Invite\"]}\r\n                tabsContent={[\r\n                    <ConfigureGroupWindow \r\n                        groupName={groupName} onRenameGroup={(newGroupName)=>renameGroup(newGroupName)} \r\n                        joinRequests={joinRequests} onAcceptInvite={acceptMember} onDeclineInvite={declineMember}/>,\r\n                    <MembersListWindow self={user.uid} members={membersUsernames} membersAvatars={membersAvatars} \r\n                    admins={admins} removeMember={kickMember} onPromote={promoteMember}/>,\r\n                    <InviteWindow onInviteFriend={(e, inviteMember)=>props.onInvite(e, inviteMember, groupID, updateUI)}/>\r\n                ]}\r\n                tabStyleId=\"manage-group-tabs\"\r\n           />\r\n\r\n          </PopupModal>\r\n        </div>\r\n    );\r\n}","import { useContext, useState, useEffect} from \"react\";\r\nimport { useNavigate } from \"react-router-dom\";\r\n\r\n//Context and tools\r\nimport { userContext } from \"../../UserProvider\";\r\nimport axiosInstance from \"../../axiosInstance\";\r\nimport { findUIDbyUsername } from \"../../firebase/ReadWriteDB\";\r\n\r\n// Components and styling\r\nimport bg from \"../../assets/images/scrollableBackground.png\"\r\nimport BackgroundWrapper from \"../../components/base-components/BackgroundWrapper\";\r\nimport NavigationBar from \"../../components/base-components/NavigationBar/NavigationBar\";\r\nimport SideMenu from \"../../components/SideMenu/SideMenu\";\r\nimport Field from \"../../components/base-components/Field/Field\";\r\nimport PopupModal, { InviteWindow } from \"../../components/base-components/PopupModal/PopupModal\";\r\nimport GroupCard from \"../../components/GroupCard/GroupCard\";\r\nimport \"./Groups.css\"\r\n\r\nexport default function Groups() {\r\n\r\n    const {user, loading} = useContext(userContext);\r\n\r\n    const navigation = useNavigate();\r\n\r\n    useEffect(()=>{\r\n            if (!user) {\r\n            navigation(\"/\");\r\n        }\r\n    },[user,navigation]);\r\n\r\n\r\n    const [groups, setGroups] = useState([]);\r\n    const [newGroupName, setNewGroupName] = useState(\"\");\r\n    const [inviteGroupId, setInviteGroupId] = useState(\"\");\r\n\r\n    //Pop up\r\n    const [isPopupOpen, setIsPopupOpen] = useState(false);\r\n\r\n    useEffect(()=>{\r\n        const fetchGroups = async ()=>{\r\n            try{\r\n                const response = await axiosInstance.get(\"/groups\");\r\n                if(response.status===200){\r\n                    console.log(response.data.message);\r\n                    console.log(response.data.groups);\r\n                    setGroups(response.data.groups);\r\n                }\r\n            }\r\n            catch(err){\r\n                console.log(err);\r\n                console.log(err.response?.data?.message);\r\n            }\r\n        }\r\n        fetchGroups();\r\n    },[]);\r\n\r\n\r\n    const openPopup = (groupId)=>{\r\n        setIsPopupOpen(true);\r\n        setInviteGroupId(groupId);\r\n    }\r\n\r\n    const closePopup = ()=>{\r\n        setIsPopupOpen(false);\r\n    }\r\n\r\n    const createGroup = async ()=> {\r\n        const payload = {creator:user.uid, name: newGroupName};\r\n        try{\r\n            const response = await axiosInstance.post(\"/groups\", payload);\r\n            const {group, message} = response.data;\r\n            if(response.status===201){\r\n                console.log(message);\r\n                console.log(group);\r\n                setGroups((prev)=>[...prev, group]);\r\n                openPopup(group._id);\r\n            }\r\n            else{\r\n                console.log(response.data?.message);\r\n            }\r\n\r\n        }\r\n        catch(err){\r\n            console.log(err);\r\n            console.log(err.response?.data?.message);\r\n        }\r\n    }\r\n    const inviteFriend = async (e, userName=\"\" , groupId, updateUI=null)=>{\r\n        \r\n        if(inviteGroupId===\"\" && !groupId ) return;\r\n\r\n        try{\r\n            console.log(`Inviting ${userName}`);\r\n            const userObj = await findUIDbyUsername(userName);\r\n            if(!userObj) return alert(\"User not found.\");\r\n            const userId = Object.keys(userObj)[0];\r\n            console.log(`DB UserID: ${userId}`);\r\n\r\n            const payloadGroupID = groupId? groupId : inviteGroupId;\r\n            console.log(`groupId: ${payloadGroupID}`);\r\n            const payload= {groupId:payloadGroupID};\r\n            const response = await axiosInstance.put(`/groups/invite/${userId}`, payload);\r\n            if(response.status===200){\r\n                console.log(response.data.message);\r\n                setGroups((prev)=>prev.map((group)=> group._id===payloadGroupID? response.data.group: group ));\r\n                alert(`Invited ${userName} to the group successfully.`);\r\n                if(updateUI) updateUI(response.data.group.members);\r\n            }\r\n        }\r\n        catch(err){\r\n            console.log(err);\r\n            console.log(err.response?.data?.message);\r\n            alert(err.response?.data?.message);\r\n            console.log(err.response?.data?.error);\r\n        }\r\n        \r\n    }\r\n\r\n    if(loading) return <div>Loading...</div>;\r\n\r\n    return(\r\n        <BackgroundWrapper\r\n            title=\"Groups\"\r\n            backgroundImage = {bg}\r\n            backgroundPosition = \"top center\"\r\n            backgroundRepeat=\"repeat-y\"\r\n            backgroundAttachment = \"scroll\"\r\n            >\r\n                \r\n            <div className=\"groups\">\r\n                <NavigationBar/>\r\n                <div className=\"page-container\">\r\n                    <SideMenu />\r\n                    <div id=\"group-feed-wrapper\">\r\n                        <div id=\"new-group-form\">\r\n                            <Field\r\n                                inputStyle=\"new-group-field\"\r\n                                type=\"text\"\r\n                                value={newGroupName}\r\n                                onChange={(e)=>setNewGroupName(e.target.value)}\r\n                                prompt=\"New group name..\"/>\r\n                            <button className=\"submit-button\" id=\"create-group-button\" \r\n                                    onClick={()=>{\r\n                                        if(window.confirm(`Are you sure you want to create the group ${newGroupName}?`)){\r\n                                            createGroup();\r\n                                        }\r\n                                        }}>\r\n                                Create\r\n                            </button>\r\n                        </div>\r\n                        <div id=\"groups-list\">\r\n                            {user && groups.length>0 && groups.map((group)=>(\r\n                            <GroupCard\r\n                                key={group._id}\r\n                                groupID={group._id}\r\n                                groupName={group.name}\r\n                                creator={group.creator}\r\n                                creationDate={group.creationDate}\r\n                                members={group.members}\r\n                                admins={group.admins}\r\n                                chatID={group.chatId}\r\n                                joinRequests={group.joinRequests}\r\n                                onDelete={()=>{\r\n                                    const newGroups = groups.filter((g)=>g._id!==group._id);\r\n                                    setGroups(newGroups);\r\n                                }}\r\n                                onInvite={inviteFriend}\r\n\r\n                            />))}\r\n                        </div>\r\n                    </div>\r\n                    \r\n                </div>\r\n                <PopupModal styleId=\"invite-popup\" onClose={closePopup} isOpen={isPopupOpen}>\r\n                    <InviteWindow onInviteFriend={inviteFriend}/>\r\n                </PopupModal>\r\n            </div>\r\n\r\n        </BackgroundWrapper>\r\n    );\r\n}"],"names":["TabbedContent","props","_props$tabsContent","tab","setTab","useState","tabs","_jsxs","_Fragment","children","_jsx","className","map","tabItem","index","_props$tabStyleId","id","tabStyleId","onClick","charAt","toUpperCase","slice","tabsContent","content","GroupCard","user","useContext","userContext","creator","creationDate","groupID","chatID","groupName","setGroupName","groupImage","setGroupImage","members","setMembers","membersAvatars","setMembersAvatars","membersUsernames","setMembersUsernames","admins","setAdmins","isPopupOpen","setIsPopupOpen","joinRequests","setJoinRequests","navigation","useNavigate","goTo","path","startTransition","useEffect","async","img","findAvatarDB","fetchGroupImage","arguments","length","undefined","avatars","Promise","all","member","fetchMembersImages","usernames","username","findUserNameDB","uid","fetchMembersUsernames","data","avatar","fetchJoinRequestsData","isJoined","includes","deleteGroup","response","axiosInstance","delete","status","console","log","message","alert","onDelete","err","_err$response","_err$response$data","updateUI","newMembers","src","alt","ScreenTitle","title","_response$data4","_response$data4$group","group","_err$response5","_err$response5$data","e","payload","groupId","post","_err$response4","_err$response4$data","PopupModal","isOpen","onClose","closePopup","styleId","ConfigureGroupWindow","onRenameGroup","newGroupName","newName","put","name","admin","_err$response3","_err$response3$data","renameGroup","onAcceptInvite","memberUID","_response$data5","_response$data5$group","_response$data6","_response$data6$group","_err$response6","_err$response6$data","onDeclineInvite","_response$data7","_response$data7$group","_response$data8","_response$data8$group","_err$response7","_err$response7$data","MembersListWindow","self","removeMember","kickedUID","_response$data","_response$data2","_response$data3","_response$data3$group","_err$response2","_err$response2$data","onPromote","_response$data9","_response$data9$group","_response$data10","_response$data10$grou","_err$response8","_err$response8$data","InviteWindow","onInviteFriend","inviteMember","onInvite","Groups","loading","groups","setGroups","setNewGroupName","inviteGroupId","setInviteGroupId","get","fetchGroups","createGroup","prev","_id","inviteFriend","userName","userObj","findUIDbyUsername","userId","Object","keys","payloadGroupID","error","BackgroundWrapper","backgroundImage","bg","backgroundPosition","backgroundRepeat","backgroundAttachment","NavigationBar","SideMenu","Field","inputStyle","type","value","onChange","target","prompt","window","confirm","chatId","newGroups","filter","g"],"sourceRoot":""}